package net.jeeshop.web.action.manage.keyvalue;import java.io.IOException;import java.util.List;import javax.servlet.ServletResponse;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.alibaba.fastjson.JSON;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.oscache.FrontCache;import net.jeeshop.services.manage.keyvalue.KeyvalueService;import net.jeeshop.services.manage.keyvalue.bean.Keyvalue;import net.jeeshop.web.action.BaseController;/** * 键值对管理 *  * @author dylan */@Controller@RequestMapping("/manage/keyvalue/")public class KeyvalueAction extends BaseController<Keyvalue> {	private static final long serialVersionUID = 1L;	@Autowired	private KeyvalueService keyvalueService;	@Autowired	private FrontCache frontCache;	private static final String page_toList = "/manage/keyvalue/keyvalueList";	private static final String page_toAdd = "/manage/keyvalue/keyvalueEdit";	private static final String page_toEdit = "/manage/keyvalue/keyvalueEdit";	KeyvalueAction() {		super.page_toList = page_toList;// not support		super.page_toAdd = page_toAdd;// not support		super.page_toEdit = page_toEdit;	}	public FrontCache getFrontCache() {		return frontCache;	}	public void setFrontCache(FrontCache frontCache) {		this.frontCache = frontCache;	}	@Override	public KeyvalueService getService() {		return keyvalueService;	}	@Override	protected void selectListAfter(PagerModel pager) {		pager.setPagerUrl("selectList");	}	public void setKeyvalueService(KeyvalueService keyvalueService) {		this.keyvalueService = keyvalueService;	}	@Override	public void insertAfter(Keyvalue e) {		e.clear();	}	@Override	@RequestMapping(value = "insert", method = RequestMethod.POST)	public String insert(HttpServletRequest request, Keyvalue e, RedirectAttributes flushAttrs) throws Exception {		super.insert(request, e, flushAttrs);		frontCache.loadKeyValue();		return "redirect:selectList";	}	@Override	@RequestMapping(value = "update", method = RequestMethod.POST)	public String update(HttpServletRequest request, Keyvalue e, RedirectAttributes flushAttrs) throws Exception {		super.update(request, e, flushAttrs);		// KeyValueHelper.load(getPager().getList());		frontCache.loadKeyValue();		return "redirect:selectList";	}	@RequestMapping(value = "checkPcodeIsRepeat")	public String checkPcodeIsRepeat(HttpServletRequest request,HttpServletResponse res) {		if (request.getParameter("p_code") != "" && request.getParameter("key1") != "") {			String p_code = request.getParameter("p_code").toString();			String key1 = request.getParameter("key1").toString();						Keyvalue kv = new Keyvalue();			kv.setKey1(key1);			kv.setP_code(p_code);						List l = keyvalueService.selectList(kv);			if (l.size() > 0) {              //有重复记录				logger.error("有重复记录 key  p_code");				try {					res.getWriter().print("isRepeat");				} catch (IOException e) {					e.printStackTrace();				}			}		}		return null;	}}