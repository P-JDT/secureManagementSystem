package net.jeeshop.web.action.manage.secureProduct;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.commons.httpclient.HttpClient;import org.apache.commons.httpclient.methods.PostMethod;import org.apache.commons.httpclient.params.HttpMethodParams;import org.apache.commons.lang.StringUtils;import org.dom4j.Document;import org.dom4j.DocumentHelper;import org.dom4j.Element;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import net.jeeshop.core.system.bean.User;import net.jeeshop.core.util.DateTimeUtil;import net.jeeshop.core.util.UUIDGeneratorUtil;import net.jeeshop.core.util.webServiceUtil;import net.jeeshop.services.common.telOperVO;import net.jeeshop.services.common.telTradeRequestVO;import net.jeeshop.services.common.userProduct;import net.jeeshop.services.manage.DetailsVO.bean.DetailsVO;import net.jeeshop.services.manage.NvhlApplicantVO.NvhlApplicantService;import net.jeeshop.services.manage.NvhlApplicantVO.bean.NvhlApplicantVO;import net.jeeshop.services.manage.NvhlApplicantVO.bean.NvhlApplicantVOJson;import net.jeeshop.services.manage.NvhlBaseVO.NvhlBaseService;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhlBaseVO;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhlBaseVOJson;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhlCommonVO;import net.jeeshop.services.manage.NvhlInsuredVO.NvhlnsuredService;import net.jeeshop.services.manage.NvhlInsuredVO.bean.NvhlInsuredVO;import net.jeeshop.services.manage.NvhlInsuredVO.bean.NvhlInsuredVOJson;import net.jeeshop.services.manage.pageRecord.bean.PageRecord;import net.jeeshop.services.manage.secureProduct.SecureProductService;import net.jeeshop.services.manage.secureProduct.bean.SecureProduct;import net.jeeshop.services.manage.secureProduct.bean.SecureProductDetail;import net.jeeshop.services.manage.system.impl.UserService;import net.jeeshop.web.action.BaseController;import net.jeeshop.web.util.LoginUserHolder;import net.jeeshop.web.util.RequestHolder;import net.sf.json.JSONArray;import net.sf.json.JSONObject;/** * 产品管理的Action * @author sunshuo * */@Controller@RequestMapping("/manage/secureProduct/")public class SecureProductAction extends BaseController<SecureProduct> {	private static final Logger logger = LoggerFactory.getLogger(SecureProductAction.class);	private static final long serialVersionUID = 1L;	@Autowired	private NvhlBaseService nvhlBaseService;	@Autowired	private NvhlApplicantService nvhlApplicantService;	@Autowired	private NvhlnsuredService nvhlnsuredService;	@Autowired	private SecureProductService secureProductService;	@Autowired	private UserService userService;	//支付完成成功返回页面		private static final String page_payReturn = "/manage/secureProduct/success";	//超级管理员的列表页面	private static final String page_toListAdmin = "/manage/secureProduct/admin/secureProductList";	//修改主产品	private static final String page_toEdit = "/manage/secureProduct/admin/secureProductEdit";	//添加主产品	private static final String page_toAdd = "/manage/secureProduct/admin/secureProductEdit";	//下订单页面	private static final String page_toOrders = "/manage/secureProduct/admin/secureProductInfo";	//结算页面	private static final String page_toPay = "/manage/secureProduct/secureProductPay";		private static final String showBindProduct = "/manage/userProduct/secureProductListTap";	private static final String showAllProduct = "/manage/userProduct/allSecureProductList";		private String resultInfo = ""; //页面处理显示结果		public String getResultInfo() {		return resultInfo;	}	private String jsonTest = "{\"telTradeRtnVO\":{\"dataTranArea\":{\"appNoFlag\":\"\",\"packageList\":[{\"baseVO\":{\"CAgtAgrNo\":\"\",\"CAppNo\":\"0100101000106300420160000395\",\"CDptCde\":\"1001010001\",\"CProdNo\":\"063004\"}}]},\"resultVO\":{\"resultCode\":\"1\"}}}";	private SecureProductAction() {		super.page_toList = page_toListAdmin;		super.page_toAdd = page_toAdd;		super.page_toEdit = page_toEdit;	}	public NvhlBaseService getNvhlBaseService() {		return nvhlBaseService;	}	public void setNvhlBaseService(NvhlBaseService nvhlBaseService) {		this.nvhlBaseService = nvhlBaseService;	}		public NvhlApplicantService getNvhlApplicantService() {		return nvhlApplicantService;	}	public void setNvhlApplicantService(NvhlApplicantService nvhlApplicantService) {		this.nvhlApplicantService = nvhlApplicantService;	}	public NvhlnsuredService getNvhlnsuredService()	{		return nvhlnsuredService;	}	public void setNvhlnsuredService(NvhlnsuredService nvhlnsuredService)	{		this.nvhlnsuredService = nvhlnsuredService;	}	public UserService getUserService() {		return userService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public SecureProductService getService() {		return secureProductService;	}	public void setSecureProductService(SecureProductService secureProductService) {		this.secureProductService = secureProductService;	}	/**	 * 	* @param	* @Description: 跳转到支付页面	* @author sunshuo	* @date 2016年10月21日 上午10:41:13 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value="toPayPage")	public String toPayPage(HttpServletRequest request, @ModelAttribute("secure") SecureProduct secure, @ModelAttribute("common") NvhlCommonVO common,@ModelAttribute("base") NvhlBaseVO base,ModelMap model,@ModelAttribute("applicantVO") NvhlApplicantVO applicantVO,@ModelAttribute("insuredVO") NvhlInsuredVO insuredVO) throws Exception {						//String secureProductID = RequestHolder.getRequest().getParameter("id");		String CProdNo = RequestHolder.getRequest().getParameter("CProdNo");//产品编码		String nAmt = RequestHolder.getRequest().getParameter("NAmt");//保额合计		String nPrm = RequestHolder.getRequest().getParameter("NPrm");//保费合计				NvhlApplicantVO applicants=new NvhlApplicantVO();		//获取当前用户权限 		//订单记录 查看 createAccount是当前登陆人的记录 如果是查看个人		String range = LoginUserHolder.getUserRole().getSelect_range();		if(range.indexOf("个人")>-1){			applicants.setCreateAccount(getAccount());		}					List<NvhlApplicantVO> applcantList = getNvhlApplicantService().selectList(applicants);		handleAttr(applcantList);		request.setAttribute("applcantList", applcantList);		base.setCProdNo(CProdNo);		base.setNAmt(Double.parseDouble(nAmt));		base.setNPrm(Double.parseDouble(nPrm));				model.addAttribute("common",common);		model.addAttribute("base", base);		model.addAttribute("applicantVO", applicantVO);		model.addAttribute("insuredVO", insuredVO);		return page_toPay;	}	/**	* @param	* @Description: TODO(提交用户信息 判定是否符合 接口1000) 	* @author lyx	* @date 2016年10月26日 下午1:09:36 	* @return String    返回类型 	* @throws	 */	public List<NvhlApplicantVO> handleAttr(List<NvhlApplicantVO> e){		if(e!=null&&e.size()>0){					}		for(int i=0;i<e.size();i++){			e.get(i).setAppNmePlay(e.get(i).getCertfCdePlay()+":"+e.get(i).getAppNmePlay());		}		return e;	}		/**	* @param	* @Description: TODO(提交用户信息 判定是否符合 接口1000) 	* @author lyx	* @date 2016年10月26日 下午1:09:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value="toCommit", method = RequestMethod.POST)	public String toCommit(HttpServletResponse res,HttpServletRequest request, @ModelAttribute("secure") SecureProduct secure, @ModelAttribute("common") NvhlCommonVO common,@ModelAttribute("base") NvhlBaseVO base,			ModelMap model,@ModelAttribute("applicantVO") NvhlApplicantVO applicantVO,@ModelAttribute("insuredVO") NvhlInsuredVO insuredVO, RedirectAttributes flushAttrs) throws Exception {						//1000接口地址		String url = "http://60.212.43.251:6001/telnetscs/services/totalInterfaceParseNode?wsdl"; //clientCodeAndAppNo（--1000接口）		Map packageList = setJson1000(base,applicantVO,insuredVO,common);		try{			String returnJson = WebService1000(url,packageList);			JSONObject  jo = JSONObject.fromObject(returnJson);						//返回码 			String resultCode = jo.getJSONObject("telTradeRtnVO").getJSONObject("resultVO").get("resultCode").toString();			//resultCode=0调用接口失败			if(StringUtils.isNotBlank(resultCode) && resultCode.equals("0")){				model.addAttribute("message", "验证失败！");				return page_toPay;						}			//投保单号 投保人代码 被保人编码 			String cAppNo = jo.getJSONObject("telTradeRtnVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("baseVO").get("CAppNo").toString();			String appCde = jo.getJSONObject("telTradeRtnVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("applicantVO").get("appCde").toString();			String insuredCde = jo.getJSONObject("telTradeRtnVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("insuredVO").get("insuredCde").toString();			UUIDGeneratorUtil uuidCreate=new UUIDGeneratorUtil();									NvhlApplicantVO vo = new NvhlApplicantVO();			vo.setAppNme(applicantVO.getAppNmePlay());			vo.setCertfCde(common.getTCertfCde());		//	vo.setAppNmePlay(applicantVO.getAppNmePlay());		//	vo.setCertfCdePlay(common.getBCCertfCde());			//查询是否是以前的客户，是的话直接把客户信息返回页面			//List<NvhlApplicantVO> list = nvhlApplicantService.selectList(vo);//				String newId = "";//				if(list.size()>0){//					NvhlApplicantVO app = list.get(0);//					newId = app.getAppCdePlay();//				}//				else{//					newId = cAppNo;//				}			//投保人代码	 			applicantVO.setAppCde(appCde);			applicantVO.setAppCdePlay(appCde);			//被保人代码			insuredVO.setInsuredCde(insuredCde);			insuredVO.setInsuredCdePlay(insuredCde);									//获取产品信息（by 产品编码）			secure.setDeleteFlag(0);					secure.setCProdNo(base.getCProdNo());			SecureProduct currentSecure = secureProductService.selectOne(secure);			//保存订单，订单状态为 0:客户信息验证中			base.setCAppNo(cAppNo);//投保单号			base.setSerialNumber(uuidCreate.getSrcUUID());//流水号			base.setAppCde(appCde);//投保人代码			base.setInsuredCde(insuredCde);//被保人代码						//填充 被保人 投保人实体 base订单 信息（for insert）			setCommonProperty(applicantVO,common);			setCommonProperty(insuredVO,common);			setNvhlBaseProperty(base,currentSecure,applicantVO,insuredVO);			try			{				int baseNum = getNvhlBaseService().insert(base);							int applicantVONum = getNvhlBaseService().insertApplication(applicantVO);				int insuredVONum = getNvhlBaseService().insertInsured(insuredVO);				logger.info(baseNum + "条记录插入 base表");				logger.info(applicantVONum + "条记录插入 applicantVO 投保人信息表");				logger.info(insuredVONum + "条记录插入 insuredVO 被保人信息表");			} catch (Exception e)			{				e.printStackTrace();			}						model.addAttribute("common",common);			model.addAttribute("base", base);			model.addAttribute("applicantVO", applicantVO);			model.addAttribute("insuredVO", insuredVO);			model.addAttribute("message", "验证成功，请支付！");					}		catch(Exception e){			e.printStackTrace();		}		return page_toPay;	}	/**	 * 	* @param	* @Description: 1000接口参数：基本信息NvhlBaseVO的赋值	* @author sunshuo	* @date 2016年11月21日 下午2:23:49 	* @return NvhlBaseVOJson    返回类型 	* @throws	 */	public Map setJson1000(NvhlBaseVO base,NvhlApplicantVO applicantVO,NvhlInsuredVO insuredVO,NvhlCommonVO common){				//新建对象		NvhlApplicantVOJson applicantVOJson = new NvhlApplicantVOJson();		NvhlBaseVOJson baseVOJson = new NvhlBaseVOJson();		NvhlInsuredVOJson insuredVOJson = new NvhlInsuredVOJson();				//NvhlApplicantVOJson		applicantVOJson.setAppNme(applicantVO.getAppNmePlay());		applicantVOJson.setCertfCde(common.getTCertfCde());		applicantVOJson.setCertfCls(common.getTCertfCls());				//NvhlInsuredVOJson赋值		baseVOJson.setCDptCde("1001150001");		baseVOJson.setCProdNo("063004");		if(base.getNAmt() != null){			baseVOJson.setNAmt(base.getNAmt().toString());//保额合计					}else{			baseVOJson.setNAmt("");//保额合计		}		if(base.getNPrm() != null){			baseVOJson.setNPrm(base.getNPrm().toString());//保费合计					}else{			baseVOJson.setNPrm("");//保费合计		}				//NvhlInsuredVOJson赋值		insuredVOJson.setInsuredNme(insuredVO.getInsuredNmePlay());		insuredVOJson.setCCertfCde(common.getBCCertfCde());		insuredVOJson.setCCertfCls(common.getBCCertfCls());				//---------------packageListMap--------------------		Map packageListMap = new HashMap();				packageListMap.put("insuredVO", insuredVOJson);				packageListMap.put("applicantVO", applicantVOJson);		packageListMap.put("baseVO", baseVOJson);		//---------------packageListMap *****--------------				return packageListMap;				}	/**	 * 	* @param	* @Description: 1000接口参数：基本信息NvhlBaseVO的赋值	* @author sunshuo	* @date 2016年11月21日 下午2:23:49 	* @return NvhlBaseVOJson    返回类型 	* @throws	 */	public Map setJson1001(NvhlBaseVO base,NvhlApplicantVO applicantVO,NvhlInsuredVO insuredVO,NvhlCommonVO common){		//新建对象		NvhlApplicantVOJson applicantVOJson = new NvhlApplicantVOJson();		NvhlBaseVOJson baseVOJson = new NvhlBaseVOJson();		NvhlInsuredVOJson insuredVOJson = new NvhlInsuredVOJson();				//UUIDGeneratorUtil uuidCreate=new UUIDGeneratorUtil();		Map dataTranArea =new LinkedHashMap();					Map baseVOMap = new LinkedHashMap();				DetailsVO detailsVo = new DetailsVO();		detailsVo.setApplicantNo(base.getCAppNo());		detailsVo.setApplicantCode(applicantVO.getAppCdePlay());		detailsVo.setApplicantName(applicantVO.getAppNmePlay());		detailsVo.setInsuredCode(insuredVO.getInsuredCdePlay());		detailsVo.setInsuredName(insuredVO.getInsuredNmePlay());		detailsVo.setCustseq(base.getSerialNumber());		detailsVo.setStartDate("2016-07-30");		detailsVo.setDataSource("45");		detailsVo.setInstallmenrsTimes("");		JSONArray detailsList = JSONArray.fromObject(detailsVo);				String[]emptyArr = {};				baseVOMap.put("amount", base.getNPrm());//交易金额		baseVOMap.put("payType", "2");//支付类型		baseVOMap.put("checkNo", "");//支票号		baseVOMap.put("payWay", "5");	//支付方式			baseVOMap.put("backUrl","http://goldenet.nat123.net/jshop/manage/NvhlBase/selectOrderList?payReturnFlag=true");		baseVOMap.put("policyStartdate", "30170726235959");//过期时间		baseVOMap.put("subCompany", "1073");//分公司代码		baseVOMap.put("currencyType", "CNY");//币种		baseVOMap.put("insuredName", "张三");//缴费人名称		baseVOMap.put("departmentCode", "1073000001");//业务归属部门		baseVOMap.put("entryObjList",emptyArr);				dataTranArea.put("baseVO", baseVOMap);		dataTranArea.put("detailsList", detailsList);		dataTranArea.put("entryObjList",emptyArr);		dataTranArea.put("packageVO", null);		dataTranArea.put("tradType","bNN004");								return dataTranArea;			}	/**	 * 	* @param	* @Description: 1000接口参数：基本信息NvhlBaseVO的赋值	* @author sunshuo	* @date 2016年11月21日 下午2:23:49 	* @return NvhlBaseVOJson    返回类型 	* @throws	 */	public Map setJson1003(NvhlBaseVO base,NvhlApplicantVO applicantVO,NvhlInsuredVO insuredVO,NvhlCommonVO common){		//新建对象		NvhlApplicantVOJson applicantVOJson = new NvhlApplicantVOJson();		NvhlBaseVOJson baseVOJson = new NvhlBaseVOJson();		NvhlInsuredVOJson insuredVOJson = new NvhlInsuredVOJson();				//NvhlApplicantVOJson		if(common != null){			applicantVOJson.setAppCde(applicantVO.getAppCdePlay());			applicantVOJson.setAppNme(applicantVO.getAppNmePlay());			applicantVOJson.setCertfCde(common.getTCertfCde());			applicantVOJson.setCertfCls(common.getTCertfCls());			applicantVOJson.setClntMrk(common.getTClntMrk());			applicantVOJson.setClntAddr(common.getTClntAddr());;			applicantVOJson.setEmail(common.getTEmail());			applicantVOJson.setZipCde(common.getTZipCde());			applicantVOJson.setMobile(common.getTMobile());			applicantVOJson.setCountry(common.getTCountry());			applicantVOJson.setCusRiskLvl(common.getTCusRiskLvl());			applicantVOJson.setCustRiskRank(common.getTCustRiskRank());					}else{			applicantVOJson.setAppCde(applicantVO.getAppCde());			applicantVOJson.setAppNme(applicantVO.getAppNme());			applicantVOJson.setCertfCde(applicantVO.getCertfCde());			applicantVOJson.setCertfCls(applicantVO.getCertfCls());			applicantVOJson.setClntMrk(applicantVO.getClntMrk());			applicantVOJson.setClntAddr(applicantVO.getClntAddr());;			applicantVOJson.setEmail(applicantVO.getEmail());			applicantVOJson.setZipCde(applicantVO.getZipCde());			applicantVOJson.setMobile(applicantVO.getMobile());			applicantVOJson.setCountry(applicantVO.getCountry());			applicantVOJson.setCusRiskLvl(applicantVO.getCusRiskLvl());			applicantVOJson.setCustRiskRank(applicantVO.getCustRiskRank());		}		//NvhlBaseVOJson赋值		baseVOJson.setCDptCde("1001150001");		baseVOJson.setSysRes("00");		baseVOJson.setCProdNo("063004");		if(base.getNAmt() != null){			baseVOJson.setNAmt(base.getNAmt().toString());//保额合计					}else{			baseVOJson.setNAmt("");//保额合计		}		if(base.getNPrm() != null){			baseVOJson.setNPrm(base.getNPrm().toString());//保费合计					}else{			baseVOJson.setNPrm("");//保费合计		}				//NvhlInsuredVOJson赋值		if(common != null){			insuredVOJson.setInsuredCde(insuredVO.getInsuredCdePlay());			insuredVOJson.setInsuredNme(insuredVO.getInsuredNmePlay());			insuredVOJson.setCCertfCde(common.getBCCertfCde());			insuredVOJson.setCCertfCls(common.getBCCertfCls());					insuredVOJson.setClntMrk(common.getBClntMrk());			insuredVOJson.setClntAddr(common.getBClntAddr());;			insuredVOJson.setCEmail(common.getBCEmail());			insuredVOJson.setZipCde(common.getBZipCde());			insuredVOJson.setMobile(common.getBMobile());			insuredVOJson.setCountry(common.getBCountry());			insuredVOJson.setCusRiskLvl(common.getBCusRiskLvl());			insuredVOJson.setCustRiskRank(common.getBCustRiskRank());		}else{			insuredVOJson.setInsuredCde(insuredVO.getInsuredCde());			insuredVOJson.setInsuredNme(insuredVO.getInsuredNme());			insuredVOJson.setCCertfCde(insuredVO.getCCertfCde());			insuredVOJson.setCCertfCls(insuredVO.getCCertfCls());					insuredVOJson.setClntMrk(insuredVO.getClntMrk());			insuredVOJson.setClntAddr(insuredVO.getClntAddr());;			insuredVOJson.setCEmail(insuredVO.getCEmail());			insuredVOJson.setZipCde(insuredVO.getZipCde());			insuredVOJson.setMobile(insuredVO.getMobile());			insuredVOJson.setCountry(insuredVO.getCountry());			insuredVOJson.setCusRiskLvl(insuredVO.getCusRiskLvl());			insuredVOJson.setCustRiskRank(insuredVO.getCustRiskRank());		}		Map packageList=new LinkedHashMap();				Map cvrgList=new LinkedHashMap();		Map payList=new LinkedHashMap();		//---------------dataTranArea--------------------		String[]emptyArr={};				cvrgList.put("CvrgNo","");//险别代码		cvrgList.put("Amt","");//保额		cvrgList.put("Rate","");//费率		Object[]cvrgListArr={cvrgList};				payList.put("NTms","1");//期次		payList.put("CProdNo", "063004");//产品编号		payList.put("NEdrPrjNo", "0100101000106300420160000303");//产品编号				payList.put("CPayorNme", "霍元甲");//付款人姓名		payList.put("CPayorCde", "8000109201");//付款人代码		payList.put("NPayablePrm", 98);//应付保费		Map bgnTmMap = new HashMap();		bgnTmMap.put("date",18);		bgnTmMap.put("day",6);		bgnTmMap.put("hours",0);		bgnTmMap.put("minutes",0);		bgnTmMap.put("month",6);		bgnTmMap.put("seconds",0);		bgnTmMap.put("time","1466179200000");		bgnTmMap.put("timezoneOffset",-480);		bgnTmMap.put("year",116);				payList.put("TPayBgnTm", bgnTmMap);//缴费起始日期				Map endTmMap = new HashMap();		endTmMap.put("date",17);		endTmMap.put("day",6);		endTmMap.put("hours",23);		endTmMap.put("minutes",59);		endTmMap.put("month",5);		endTmMap.put("seconds",59);		endTmMap.put("time","1497715199000");		endTmMap.put("timezoneOffset",-480);		endTmMap.put("year",117);				payList.put("TPayEndTm", endTmMap);//缴费截止日期		payList.put("TPaidTm", null);//缴费截止日期		payList.put("CRecptNo", "");//缴费截止日期				payList.put("NPaidPrm", "98");//实收保费		payList.put("CCurCde", "01");//	付款币种			payList.put("NPayNo", base.getPayNo());//支付申请号 		payList.put("CBankCde", "");//开户银行 		payList.put("entryObjList", null);//支付申请号 				Object[]payListArr={payList};						packageList.put("packageNO","");		packageList.put("applicantVO", applicantVOJson);		packageList.put("insuredVO", insuredVOJson);		packageList.put("baseVO", baseVOJson);		packageList.put("acctinfoVO",null);		packageList.put("bnfcList",emptyArr);		packageList.put("cvrgList", cvrgListArr);		packageList.put("feeList", emptyArr);		packageList.put("grpMemberVoList", emptyArr);		packageList.put("payList", payListArr);			return packageList;	}		/**	 * 	* @param	* @Description: 支付 处理	* 	1.拼接json 串 调用1000接口	*	2.根据产品code 获取产品信息	*	3.封装base对象 	*	4.插入base对象（订单） 投保人、 被保人对象 	* @author sunshuo	* @date 2016年10月21日 上午10:40:21 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value="toPay", method = RequestMethod.POST)	public String toPay(HttpServletRequest request, HttpServletResponse response,@ModelAttribute("secure") SecureProduct secure, @ModelAttribute("common") NvhlCommonVO common,@ModelAttribute("base") NvhlBaseVO base,			ModelMap model,@ModelAttribute("applicantVO") NvhlApplicantVO applicantVO,@ModelAttribute("insuredVO") NvhlInsuredVO insuredVO, RedirectAttributes flushAttrs) throws Exception {								//1001个接口						String url1001 = "http://60.212.43.251:6001/telnetscs/services/totalInterfaceParseNode?wsdl"; //getPayNo（--1001接口）		Map dataTranArea = setJson1001(base, applicantVO, insuredVO, common);		//调用支付申请号		String payNoResult = WebService1001(url1001,dataTranArea);			JSONObject payNoJson = JSONObject.fromObject(payNoResult);		//返回码 		String resultCode = payNoJson.getJSONObject("telTradeRtnVO").getJSONObject("resultVO").get("resultCode").toString();						//resultCode=0调用接口失败		if(StringUtils.isNotBlank(resultCode) && resultCode.equals("0")){							model.addAttribute("message", "支付失败！");								}		else{			//从json对象中解析出支付申请号 			String payNo = payNoJson.getJSONObject("telTradeRtnVO").getJSONObject("dataTranArea").getJSONObject("packageVO").get("payNo").toString();								model.addAttribute("resultCode", payNo);				//把支付申请号更新到订单中			base.setPayNo(payNo);			base.setStatus("1");//1：支付中			base.setUpdateAccount(getAccount());						try {				//获取支付号后，此时订单状态为支付中，并且更新订单				int baseNum = getNvhlBaseService().updatePayNo(base);							} catch (Exception e) {							e.printStackTrace();			}				}				return page_toPay;	}		/**	 * 	* @param	* @Description:设置基本信息NvhlBaseVO	* @author sunshuo	* @date 2016年10月21日 下午3:15:47 	* @return void 	* @throws	 */	public void  setNvhlBaseProperty(NvhlBaseVO base,SecureProduct currentSecure,NvhlApplicantVO app ,NvhlInsuredVO ins){		base.setCProdName(currentSecure.getCProdName()); //险种名称		base.setCProdNo(currentSecure.getCProdNo()); //险种代码		base.setNAmtRmbExch(currentSecure.getNAmtRmbExch());//保额币种		base.setNAmt(currentSecure.getNAmt());//保额合计		base.setNPrmRmbExch(currentSecure.getNPrmRmbExch());//保费币种		base.setNPrm(currentSecure.getNPrm());//保费合计			base.setAppCde(app.getAppCdePlay()); //投保人编码		base.setInsuredCde(ins.getInsuredCdePlay()); //被保人编码						base.setCreateAccount(getAccount());		base.setStatus("2");//2:客户信息审核中		base.setDeleteFlag("0");//0未删除	}	/**	 * 	* @param	* @Description:投保人被保人页面有名称相同的属性，此方法是给投保人相同的属性赋值 	* @author sunshuo	* @date 2016年10月21日 下午3:15:47 	* @return Object    返回类型 	* @throws	 */	public void  setCommonProperty( NvhlApplicantVO applicantVO,NvhlCommonVO common){		applicantVO.setClntMrk(common.getTClntMrk());//客户类型		applicantVO.setCertfCde(common.getTCertfCde());//证件号码		applicantVO.setCertfCls(common.getTCertfCls());//证件类型		applicantVO.setClntAddr(common.getTClntAddr());//住址		applicantVO.setZipCde(common.getTZipCde());//邮编		applicantVO.setEmail(common.getTEmail());//邮箱		applicantVO.setMobile(common.getTMobile());//联系方式		applicantVO.setCountry(common.getTCountry());//国家		applicantVO.setCusRiskLvl(common.getTCusRiskLvl());//客户风险等级		applicantVO.setCustRiskRank(common.getTCustRiskRank());//反洗钱客户风险等级		applicantVO.setCreateAccount(getAccount());	}	/**	 * 	* @param	* @Description:投保人被保人页面有名称相同的属性，此方法是 给被保人相同的属性赋值 	* @author sunshuo	* @date 2016年10月21日 下午3:15:47 	* @return void	* @throws	 */	public void  setCommonProperty(NvhlInsuredVO insuredVO,NvhlCommonVO common){		insuredVO.setClntMrk(common.getBClntMrk());//客户类型		insuredVO.setCCertfCde(common.getBCCertfCde());//证件号码		insuredVO.setCCertfCls(common.getBCCertfCls());//证件类型		insuredVO.setClntAddr(common.getBClntAddr());//住址		insuredVO.setZipCde(common.getBZipCde());//邮编		insuredVO.setCEmail(common.getBCEmail());//邮箱		insuredVO.setMobile(common.getBMobile());//联系方式		insuredVO.setCountry(common.getBCountry());//国家		insuredVO.setCusRiskLvl(common.getBCusRiskLvl());//客户风险等级		insuredVO.setCustRiskRank(common.getBCustRiskRank());//反洗钱客户风险等级			insuredVO.setCreateAccount(getAccount());	}	/**	 * 	* @param	* @Description: 获取投保单号，投保人编号，被保人编号	* @author sunshuo	* @date 2016年10月21日 上午10:42:36 	* @return String    返回类型 	* @throws	 */	public String WebService1000(String url,Map packageListMap){		//最底层 packageList		Map outerMap = new LinkedHashMap();				Map dataTranAreaMap = new LinkedHashMap();						JSONArray packageListMapObject = JSONArray.fromObject(packageListMap);				dataTranAreaMap.put("tradType", "6NN003");		dataTranAreaMap.put("packageList", packageListMapObject);		dataTranAreaMap.put("appNoFlag", "3");//传3，是否返回投保单号标志				telTradeRequestVO ttr = getDefaultTelTradeRequest("6NN003",dataTranAreaMap);					outerMap.put("telTradeRequestVO",ttr);		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd("123456");		teloper.setAccequ("");		teloper.setCOperId("user");		teloper.setOperTm("");		teloper.setIp("");		teloper.setMacAddress("");		//telOperVO teloper = getDefaultTelOperVO(teloper);				outerMap.put("telOperVO", teloper);		JSONObject json = JSONObject.fromObject(outerMap);//		Object applicantJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("applicantVO").remove("list");//		Object baseJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("baseVO").remove("list");//		Object insuredJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("insuredVO").remove("list");				//调用webservice接口 		String result = webServiceUtil.getSupplyInfo(json.toString(),url,"clientCodeAndAppNo");				return result;	}	/**	 * 	* @param	* @Description: 获取支付申请号	* @author sunshuo	* @date 2016年10月21日 上午10:42:56 	* @return String    返回类型 	* @throws	 */	public String WebService1001(String url, Map dataTranArea){		//最底层 packageList		Map outerMap = new LinkedHashMap();				telTradeRequestVO telTradeRequestVO =null;				//---------------telTradeRequestVO--------------------		 telTradeRequestVO= getDefaultTelTradeRequest("bNN004",dataTranArea);		//---------------telTradeRequestVO *****--------------			//---------------outerMap--------------------		//telOperVO teloper=getDefaultTelOperVO("123456","123456","123456","123456","123456","123456","123456");		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd("JDT123456");		teloper.setAccequ("PC");		teloper.setCOperId("userJDT");		teloper.setOperTm(DateTimeUtil.getDateNowByExpression("yyyy-MM-dd hh:mm:ss"));		teloper.setIp("10.5.5.64");		teloper.setMacAddress("");				outerMap.put("telOperVO",teloper);				outerMap.put("telTradeRequestVO",telTradeRequestVO);			//---------------outerMap *****--------------						JSONObject json = JSONObject.fromObject(outerMap);				//调用webservice接口 		String result = webServiceUtil.getSupplyInfo(json.toString(), url,"getTotalParse");				return result;	}	/**	 * 	* @param	* @Description: 获取支付申请号	* @author sunshuo	* @date 2016年10月21日 上午10:43:14 	* @return String    返回类型 	* @throws	 */		public String WebService1003(String url ,Map packageList){		//最底层 packageList 		Map outerMap = new LinkedHashMap();				telTradeRequestVO telTradeRequestVO = null;		Map dataTranArea=new LinkedHashMap();					Object[]packageListArr={packageList};			dataTranArea.put("cancelPlyVO", null);		 dataTranArea.put("packageList", packageListArr);		 dataTranArea.put("queryPlyVO",null);		 dataTranArea.put("queryAppVO", null);		 dataTranArea.put("packageVO", null);		 dataTranArea.put("tradType","");		//---------------dataTranArea *****--------------								//---------------telTradeRequestVO--------------------		  telTradeRequestVO= getDefaultTelTradeRequest("bNN001",dataTranArea);				//---------------telTradeRequestVO *****--------------			//---------------outerMap--------------------	    //telOperVO teloper=getDefaultTelOperVO("123456","123456","123456","123456","123456","123456","123456");		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd("123456");		teloper.setAccequ("");		teloper.setCOperId("user");				teloper.setIp("");		teloper.setMacAddress("");		teloper.setOperTm(null);				outerMap.put("telOperVO",teloper);				outerMap.put("telTradeRequestVO",telTradeRequestVO);		outerMap.put("telTradeRtnVO",null);			//---------------outerMap *****--------------						JSONObject json = JSONObject.fromObject(outerMap);			//TODO:调试用		System.out.print("10033入参报文"+json);		//调用webservice接口 		String result = webServiceUtil.getSupplyInfo(json.toString(), url,"getTotalParse");			System.out.print("1003出参报文"+result);		return result;	}	/**	 * 	* @param	* @Description: 封装 teloper 实体	* @author sunshuo	* @date 2016年10月21日 下午3:53:38 	* @return telTradeRequestVO    返回类型 	* @throws	 */	public telOperVO getDefaultTelOperVO(String id,String cPassWd,String accequ,String cOperId,String operTm,String ip,String macAddress){		telOperVO teloper = new telOperVO();		teloper.setId(id);		teloper.setCPassWd(cPassWd);		teloper.setAccequ(accequ);		teloper.setCOperId(cOperId);		teloper.setOperTm(operTm);		teloper.setIp(ip);		teloper.setMacAddress(macAddress);		return teloper;	}	/**	 * 	* @param	* @Description: 封装 PageRecord 实体	* @author sunshuo	* @date 2016年10月21日 下午3:53:38 	* @return telTradeRequestVO    返回类型 	* @throws	 */	public PageRecord getDefaultPageRecord(){		PageRecord pr = new PageRecord();				return pr;	}	/**	 * 	* @param	* @Description: 封装 telTradeRequestVO 实体	* @author sunshuo	* @date 2016年10月21日 下午3:53:38 	* @return telTradeRequestVO    返回类型 	* @throws	 */	public telTradeRequestVO getDefaultTelTradeRequest(String tradeTye,Map dataTranArea){		telTradeRequestVO ttr = new telTradeRequestVO();		ttr.setDataTranArea(dataTranArea);		ttr.setTid(null);		ttr.setTransNo("afb201606171656001291");		ttr.setTransTime(DateTimeUtil.getDateNowByExpression("hh:mm:ss"));		ttr.setTransDate(DateTimeUtil.getDateNowByExpression("yyyy-MM-dd"));		ttr.setTransType(tradeTye);//需与业务确认 		ttr.setSubtransNo("");		ttr.setPageRecord(null);				return ttr;	}	@Override	public String toAdd(@ModelAttribute("e") SecureProduct e, ModelMap model) throws Exception {		String pid = RequestHolder.getRequest().getParameter("pid");				return page_toAdd;	}		/**	 * 	* @param	* @Description: TODO(这里用一句话描述这个方法的作用) 	* @author sunshuo	* @date 2016年10月21日 上午10:44:56 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "toOrder")	public String toOrder(@ModelAttribute("e")SecureProduct e,ModelMap model) throws Exception {		//RequestHolder.getRequest().setAttribute("catalogs", systemManager.getCatalogs());//		getSession().setAttribute("insertOrUpdateMsg", "");		String id = RequestHolder.getRequest().getParameter("id");		e = getService().selectById(id);		SecureProductDetail subProduct=new SecureProductDetail();		subProduct.setpId(id);		List<SecureProductDetail> secureProductDetail=getService().selectSecureProductDetail(subProduct);		if(e==null || StringUtils.isBlank(e.getId())){			throw new NullPointerException("根据产品ID查询不到指定的产品！");		}		e.setSecureProductDetailList(secureProductDetail);		model.addAttribute("e", e);		return page_toOrders;			}	//列表页面点击 编辑商品	@Override	public String toEdit(@ModelAttribute("e")SecureProduct e, ModelMap model) throws Exception {//		getSession().setAttribute("insertOrUpdateMsg", "");		return toEdit0(e, model);	}	/**	 * 添加或编辑商品后程序回转编辑	 * @return	 * @throws Exception	 */	@RequestMapping(value = "toEdit2")	public String toEdit2(SecureProduct e, ModelMap model) throws Exception {		return toEdit0(e, model);	}	/**	 * 添加或编辑商品后程序回转编辑	 * @return	 * @throws Exception	 */	@RequestMapping(value = "toEditProduct")	public String toEditProduct(SecureProduct e, ModelMap model) throws Exception {		return toEdit0(e, model);	}		/**	 * 根据商品ID，加载商品全部信息	 */	private String toEdit0(SecureProduct e, ModelMap model) throws Exception {        //RequestHolder.getRequest().setAttribute("catalogs", systemManager.getCatalogs());		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("产品ID不能为空！");		}				e = getService().selectById(e.getId());		SecureProductDetail subProduct=new SecureProductDetail();		subProduct.setpId(e.getId());		List<SecureProductDetail> secureProductDetail=getService().selectSecureProductDetail(subProduct);		e.setSecureProductDetailList(secureProductDetail);		if(e.getSecureProductDetailList()!=null && e.getSecureProductDetailList().size() > 0){						//如果有子产品，则添加3个到集合的最后，以方便添加数据			for(int i=0;i<3;i++){				e.getSecureProductDetailList().add(new SecureProductDetail());			}					}		if(e==null || StringUtils.isBlank(e.getId())){			throw new NullPointerException("根据产品ID查询不到指定的产品！");		}		model.addAttribute("e", e);		return page_toEdit;	}	//分页查询商品	@Override	public String selectList(HttpServletRequest request,@ModelAttribute("e") SecureProduct e) throws Exception {		try {			String role = LoginUserHolder.getUserRole().getRole_name();						if(!role.equals("超级管理员")){				User user = LoginUserHolder.getLoginUser();				e.setUid(user.getId());			}			super.selectList(request, e);							} catch (Exception ex) {			ex.printStackTrace();			throw ex;		}				return page_toListAdmin;	}		@Override	protected void setParamWhenInitQuery(SecureProduct e) {		super.setParamWhenInitQuery(e);		String selectOutOfStockProduct = RequestHolder.getRequest().getParameter("selectOutOfStockProduct");		if(StringUtils.isNotBlank(selectOutOfStockProduct)){			//后台--首页 需要查询缺货商品			e.setSelectOutOfStockProduct(Boolean.valueOf(selectOutOfStockProduct));		}	}	/**	 *  添加产品	 */	@RequestMapping(value = "insertSecureProduct", method = RequestMethod.POST)	public String insertSecureProduct(HttpServletRequest request, SecureProduct e, ModelMap model, RedirectAttributes flushAttrs) throws Exception {		logger.error(">>>insert secureProduct...");				e.setStatus(1);		e.setDeleteFlag(0);		e.setCreateAccount(getAccount());		int pid=getService().insertSecureProduct(e);		insertSubProduct(e,pid);		e.setCreateAccount(getAccount());		model.addAttribute("e", e);		flushAttrs.addFlashAttribute("message", "新增成功！");		return "redirect:back";	}	/**	 *  添加子产品	 */	public void insertSubProduct(SecureProduct e,int pid) throws Exception {		List<SecureProductDetail> secureProductDetaillist=e.getSecureProductDetailList();		if(secureProductDetaillist!=null && secureProductDetaillist.size()>0){			for(int i=0;i<secureProductDetaillist.size();i++){				logger.error("=======保存子产品" + secureProductDetaillist.get(i));				SecureProductDetail subProduct = secureProductDetaillist.get(i);				if(subProduct.getSubName()!=null&&subProduct.getSubName().length() >0){					subProduct.setpId(String.valueOf(pid));					subProduct.setStatus(1);					subProduct.setDeleteFlag(0);					subProduct.setCreateAccount(getAccount());					int id=getService().insertSecureProductDetail(subProduct);				}							}		}else{			logger.error("=======保存失败");		}	}	/**	 * 更新产品	 */	public String updateSubProduct(HttpServletRequest request, SecureProductDetail e) throws Exception {		e.setUpdateAccount(getAccount());		getService().updateSecureProductDetail(e);		return null;	}		//获取后台管理人员的账号	private String getAccount(){		User user = LoginUserHolder.getLoginUser();		if(user==null){			throw new NullPointerException("登陆超时！");		}		return user.getId();	}		/**	 * 更新产品	 */	@Override	public String update(HttpServletRequest request, SecureProduct e, RedirectAttributes flushAttrs) throws Exception {		e.setUpdateAccount(getAccount());		//insertSubProduct(e,Integer.parseInt(e.getId()));		getService().update(e);		addMessage(flushAttrs, "修改成功！");		return "redirect:toEdit2?id="+ e.getId();	}		/**	 * 	* @param	* @Description: 公共的批量删除数据的方法，子类可以通过重写此方法实现个性化的需求 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws 	 */	@Override	        public String deletes(HttpServletRequest request, String[] ids, SecureProduct e, RedirectAttributes flushAttrs) throws Exception {	    			String deleteFlag = RequestHolder.getRequest().getParameter("deleteFlag");		User user = LoginUserHolder.getLoginUser();		//==0是只删除子产品		if(deleteFlag.equals("0")){				e.setUpdateAccount(user.getId());			getService().deleteSubProduct(ids, e);				addMessage(flushAttrs, "删除成功！");			return "redirect:toEdit2?id="+e.getId();		}else{			getService().deletes(ids,SecureProduct.Delete_flag_y,user.getId());			addMessage(flushAttrs, "删除成功！");	        return "redirect:selectList";		}			    }		/**	 * 	* @param	* @Description: 商品上架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateUpProduct", method = RequestMethod.POST)	public String updateUpProduct(@ModelAttribute("e")SecureProduct e) throws Exception{		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException();		}				User user = LoginUserHolder.getLoginUser();		secureProductService.updateProductStatus(new String[]{e.getId()},SecureProduct.Product_status_y,user.getUsername());//		getSession().setAttribute("insertOrUpdateMsg", "上架成功！");//		getResponse().sendRedirect(getEditUrl(e.getId()));		return "redirect:toEdit2?id="+e.getId();	}		/**	 * 	* @param	* @Description: 商品下架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateDownProduct", method = RequestMethod.POST)	public String updateDownProduct(@ModelAttribute("e")SecureProduct e) throws Exception{		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException();		}		User user = LoginUserHolder.getLoginUser();		secureProductService.updateProductStatus(new String[]{e.getId()},SecureProduct.Product_status_n,user.getUsername());//		getSession().setAttribute("insertOrUpdateMsg", "下架成功！");//		getResponse().sendRedirect(getEditUrl(e.getId()));		return "redirect:toEdit2?id="+e.getId();	}		/**	 * 	* @param	* @Description: 商品上架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateUp", method = RequestMethod.POST)	public String updateUp(@ModelAttribute("e")SecureProduct e,String[] ids) throws Exception{				updateStatus(ids,SecureProduct.Product_status_y);		return "redirect:selectList";	}	/**	 * 	* @param	* @Description: 商品下架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateDown", method = RequestMethod.POST)	public String updateDown(@ModelAttribute("e")SecureProduct e,String[] ids) throws Exception{		updateStatus(ids, SecureProduct.Product_status_n);		return selectList(RequestHolder.getRequest(), new SecureProduct());	}	/**	 * 	* @param	* @Description: 商品下架 /上架	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	private void updateStatus(String[] ids, int status){		User user = LoginUserHolder.getLoginUser();		secureProductService.updateProductStatus(ids,status,user.getUsername());	}		/**	 * @description 用户编辑页面查询该用户已绑定的所有产品	 * @author lin	 * @return	 * @throws Exception	 */	@RequestMapping("userProductList")	public String userProductList(HttpServletRequest request, ModelMap model , @ModelAttribute("e") SecureProduct e) throws Exception {		// 用户编号		String uid = request.getParameter("uid");		// 用户名存入session 供显示用		if (request.getParameter("uname") != null) {			RequestHolder.getSession().setAttribute("userName", request.getParameter("uname"));			RequestHolder.getSession().setAttribute("uid", uid);		}				super.selectList(request, e);		return showBindProduct;	}	/**	 * 查询所有商品 标记已绑定的	 * 	 * @param request	 * @param ids	 *     已绑定的产品编号	 * @return	 * @throws Exception	 */	@RequestMapping("getAllProduct")	public String getAllProduct(HttpServletRequest request, @ModelAttribute("e") SecureProduct e)			throws Exception {		try {			HttpSession sess = RequestHolder.getSession();			String uid = e.getUid();			e.setUid("");			//e.setStatus(1); //查询所有已上架的产品			super.selectList(request, e);			e.setUid(uid);			userProduct u = new userProduct();			u.setUser_id(uid);			//查询该用户的所有产品信息			List<userProduct> idsList = getService().selectIDListFromUserProduct(u);			String ids = "";			if(idsList.size()>0){				 Iterator<userProduct> up = idsList.iterator(); 				 while(up.hasNext()){					 userProduct userproduct  = up.next();					 ids += "," + userproduct.getProduct_id();				 }				 ids = ids.substring(1,ids.length());			}			//所有产品id串返回前台供勾选			sess.setAttribute("repeatIds", ids);			return showAllProduct;		} catch (Exception ex) {			ex.printStackTrace();			throw ex;		}	}	/**	* @param postData 1005报文	* @Description: TODO(远程调用接口) 	* @author lyx	* @date 2016年10月21日 下午2:07:55 	* @return String    返回类型 	* @throws	 */	public String getResonseInfo(String postData){		String responseMsg ="";//接受信息		HttpClient httpClient = new HttpClient();		httpClient.getParams().setContentCharset("utf-8");		String url = "http://localhost:8080/jshop"; //接口ｕｒｌ		PostMethod pm = new PostMethod(url);		pm.addParameter("responseXml", postData);		pm.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,"utf-8");		try{		httpClient.executeMethod(pm);		responseMsg = pm.getResponseBodyAsString().trim();		}catch(Exception e){			e.printStackTrace();		}		return responseMsg;			}	/**	 * @Description: TODO(给用户绑定商品) 	 * @author lyx	 * @date 2016年9月21日 下午4:10:01 	 * @return String 返回类型 @throws	 */	@RequestMapping("bindUserProduct")	public String bindUserProduct(HttpServletRequest request, @ModelAttribute("e") SecureProduct e ) {		String userId = "";		String ids = request.getParameter("ids");		String uid ="";		userId = RequestHolder.getSession().getAttribute("uid").toString();//获取当前用户名		if(RequestHolder.getSession().getAttribute("userName")!=null){			 uid = RequestHolder.getSession().getAttribute("uid").toString();		}		int secureProductIDS = secureProductService.bindUserProduct(ids,uid);		logger.info("共插入了"+(secureProductIDS+1)+"条记录");					//查询该用户编号下的所有产品		try {			e.setUid(userId);			userProductList(request, null, e) ;		} catch (Exception e1) {			e1.printStackTrace();		}		return "redirect:userProductList?uid="+uid;	}	/**	 * 	* @param	* @Description: TODO(这里用一句话描述这个方法的作用) 	* @author sunshuo	* @date 2016年11月23日 下午1:32:55 	* @return HashMap    返回类型 	* @throws	 */	public  HashMap xmlElements(String xmlDoc ) {		Document doc = null;		HashMap hm = new HashMap();		try {			doc = DocumentHelper.parseText(xmlDoc);			Element root = doc.getRootElement();			Element el = root.element("BODY").element("PAY_INFO");			List<Element> list = el.elements();			for(Element e :list){				hm.put(e.getName(),  e.getText());			}		} catch (Exception e) {		}		return hm;	}	/**	 * 	* @param	* @Description: 支付成功后支付页面回调此函数	* @author sunshuo	* @date 2016年11月24日 下午1:14:04 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "payReturn")	public String payReturn(HttpServletRequest request){				return page_payReturn;	}	/**	 * 	* @param	* @Description: 1：解析华海1005接口返回数据，给订单base类支付申请号赋值，查询该条订单	* 				2：进而查询出投保人和被保人具体信息	* 				3：调用华海1003接口	* @author sunshuo	* @date 2016年11月22日 下午3:05:55 	* @return void    返回类型 	* @throws	 */	@RequestMapping(value = "pay_Result",method = RequestMethod.POST)	public String pay_Result(HttpServletRequest request){						Object secure = RequestHolder.getSession().getAttribute("secure");		NvhlCommonVO common = (NvhlCommonVO)RequestHolder.getSession().getAttribute("common");		NvhlBaseVO base1 = (NvhlBaseVO)RequestHolder.getSession().getAttribute("base");		NvhlApplicantVO applicantVO1 = (NvhlApplicantVO)RequestHolder.getSession().getAttribute("applicantVO");		NvhlInsuredVO insuredVO1= (NvhlInsuredVO)RequestHolder.getSession().getAttribute("insuredVO");				String payResultXml = request.getParameter("responseXml");		HashMap payResultMap = xmlElements(payResultXml);		String payNo = payResultMap.get("PAY_APP_NO").toString();//解析支付申请号		String cashNo = payResultMap.get("CASH_NO").toString();//票据号		String payType = payResultMap.get("PAYTYPE").toString();//支付方式		String bankAcctDate = payResultMap.get("BANK_ACCT_DATE").toString();//支付时间		String bankCode = payResultMap.get("BANK_CODE").toString();//收单行号		String tidNo = payResultMap.get("TID_NO").toString();//终端号		String bkSerial = payResultMap.get("BK_SERIAL").toString();//银行交易流水		String cardNo = payResultMap.get("CARD_NO").toString();//卡号		String remark = payResultMap.get("REMARK").toString();//备注		String status = payResultMap.get("STATUS").toString();//支付状态			NvhlApplicantVO applicantVO = new NvhlApplicantVO();		NvhlInsuredVO insuredVO = new NvhlInsuredVO();		NvhlBaseVO base	= new NvhlBaseVO();			base.setPayNo(payNo);		base.setCashNo(cashNo);		base.setPayType(payType);		base.setBankAcctDate(bankAcctDate);		base.setBankCode(bankCode);		base.setTidNo(tidNo);		base.setBkSerial(bkSerial);		base.setCardNo(cardNo);		base.setRemark(remark);		base.setStatus(status);//0:支付成功完成				//更新订单		int a = getNvhlBaseService().update(base);				//查询订单				base = getNvhlBaseService().selectOne(base);		System.out.print(base);				applicantVO.setAppCde(base.getAppCde());		//查询投保人				applicantVO = getNvhlApplicantService().selectOne(applicantVO);		System.out.print("toubaoren :"+applicantVO);		insuredVO.setInsuredCde(base.getInsuredCde());		//查询被保人			insuredVO = getNvhlnsuredService().selectOne(insuredVO);		System.out.print("beibaoren :"+insuredVO);		//1003接口url		String url1003 = "http://60.212.43.251:6001/telnetscs/services/totalInterfaceParseNode?wsdl"; //（--1003接口）		Map packageListNos = setJson1003(base,applicantVO,insuredVO,common);						//String resultJson = WebService1003(url1003,packageListNos);		//JSONObject json =JSONObject.fromObject(resultJson);		return "redirect:/manage/secureProduct/selectList";	}}