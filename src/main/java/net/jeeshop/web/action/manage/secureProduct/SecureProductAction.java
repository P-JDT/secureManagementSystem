package net.jeeshop.web.action.manage.secureProduct;import java.io.PrintWriter;import java.net.URLEncoder;import java.util.ArrayList;import java.util.HashMap;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.commons.lang.StringUtils;import org.dom4j.Document;import org.dom4j.DocumentHelper;import org.dom4j.Element;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.alibaba.fastjson.JSON;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.system.bean.User;import net.jeeshop.core.util.DateTimeUtil;import net.jeeshop.core.util.UUIDGeneratorUtil;import net.jeeshop.core.util.webServiceUtil;import net.jeeshop.services.common.SystemSetting;import net.jeeshop.services.common.telOperVO;import net.jeeshop.services.common.telTradeRequestVO;import net.jeeshop.services.common.userProduct;import net.jeeshop.services.manage.DetailsVO.bean.DetailsVO;import net.jeeshop.services.manage.NvhlApplicantVO.NvhlApplicantService;import net.jeeshop.services.manage.NvhlApplicantVO.bean.NvhlApplicantVO;import net.jeeshop.services.manage.NvhlApplicantVO.bean.NvhlApplicantVOJson;import net.jeeshop.services.manage.NvhlBaseVO.NvhlBaseService;import net.jeeshop.services.manage.NvhlBaseVO.NvhlCollectCommService;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhCollectCommonVO;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhlBaseVO;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhlBaseVOJson;import net.jeeshop.services.manage.NvhlBaseVO.bean.NvhlCommonVO;import net.jeeshop.services.manage.NvhlInsuredVO.NvhlnsuredService;import net.jeeshop.services.manage.NvhlInsuredVO.bean.NvhlInsuredVO;import net.jeeshop.services.manage.NvhlInsuredVO.bean.NvhlInsuredVOJson;import net.jeeshop.services.manage.keyvalue.KeyvalueService;import net.jeeshop.services.manage.keyvalue.bean.Keyvalue;import net.jeeshop.services.manage.pageRecord.bean.PageRecord;import net.jeeshop.services.manage.secureProduct.SecureProductService;import net.jeeshop.services.manage.secureProduct.bean.NvhlCvrgVO;import net.jeeshop.services.manage.secureProduct.bean.SecureProduct;import net.jeeshop.services.manage.secureProduct.bean.SecureProductDetail;import net.jeeshop.services.manage.system.impl.UserService;import net.jeeshop.web.action.BaseController;import net.jeeshop.web.util.LoginUserHolder;import net.jeeshop.web.util.RequestHolder;import net.sf.json.JSONArray;import net.sf.json.JSONObject;/** * 保险产品信息 */@Controller@RequestMapping("/manage/secureProduct/")public class SecureProductAction extends BaseController<SecureProduct> {	private static final Logger logger = LoggerFactory.getLogger(SecureProductAction.class);	private static final long serialVersionUID = 1L;		@Autowired	private NvhlCollectCommService CollectCommService;	@Autowired	private KeyvalueService keyvalueService;	@Autowired	private NvhlBaseService nvhlBaseService;	@Autowired	private NvhlApplicantService nvhlApplicantService;	@Autowired	private NvhlnsuredService nvhlnsuredService;	@Autowired	private SecureProductService secureProductService;	@Autowired	private UserService userService;	//超级管理员的列表页面	private static final String page_toListAdmin = "/manage/secureProduct/admin/secureProductList";	//修改主产品	private static final String page_toEdit = "/manage/secureProduct/admin/secureProductEdit";	//添加主产品	private static final String page_toAdd = "/manage/secureProduct/admin/secureProductEdit";	//下订单页面	private static final String page_toOrders = "/manage/secureProduct/admin/secureProductInfo";	//结算页面	private static final String page_toPay = "/manage/secureProduct/secureProductPay";		private static final String showBindProduct = "/manage/userProduct/secureProductListTap";	private static final String showAllProduct = "/manage/userProduct/allSecureProductList";		private static final String nvhlBaseInfo = "/manage/nvhlBase/nvhlBaseInfo";	//private static String p_code;	private SecureProductAction() {		super.page_toList = page_toListAdmin;		super.page_toAdd = page_toAdd;		super.page_toEdit = page_toEdit;	}	public NvhlBaseService getNvhlBaseService() {		return nvhlBaseService;	}	public void setNvhlBaseService(NvhlBaseService nvhlBaseService) {		this.nvhlBaseService = nvhlBaseService;	}		public NvhlApplicantService getNvhlApplicantService() {		return nvhlApplicantService;	}	public void setNvhlApplicantService(NvhlApplicantService nvhlApplicantService) {		this.nvhlApplicantService = nvhlApplicantService;	}	public NvhlnsuredService getNvhlnsuredService()	{		return nvhlnsuredService;	}	public void setNvhlnsuredService(NvhlnsuredService nvhlnsuredService)	{		this.nvhlnsuredService = nvhlnsuredService;	}	public UserService getUserService() {		return userService;	}	public void setUserService(UserService userService) {		this.userService = userService;	}	public SecureProductService getService() {		return secureProductService;	}	public void setSecureProductService(SecureProductService secureProductService) {		this.secureProductService = secureProductService;	}	/**	 * 	* @param	* @Description: 跳转到支付页面	* @author sunshuo	* @date 2016年10月21日 上午10:41:13 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value="toPayPage")	public String toPayPage(HttpServletRequest request, @ModelAttribute("secure") SecureProduct secure, @ModelAttribute("common") NvhlCommonVO common,@ModelAttribute("base") NvhlBaseVO base,ModelMap model,@ModelAttribute("applicantVO") NvhlApplicantVO applicantVO,@ModelAttribute("insuredVO") NvhlInsuredVO insuredVO,SecureProductDetail sercureDetail) throws Exception {						String CProdNo = RequestHolder.getRequest().getParameter("CProdNo");//产品编码		String nAmt = RequestHolder.getRequest().getParameter("NAmt");//保额合计		String nPrm = RequestHolder.getRequest().getParameter("NPrm");//保费合计		String occPropFlag = RequestHolder.getRequest().getParameter("occPropFlag");//是否显示占地标识		NvhlApplicantVO applicants=new NvhlApplicantVO();		//获取当前用户权限 		//订单记录 查看 createAccount是当前登陆人的记录 如果是查看个人		String range = LoginUserHolder.getUserRole().getSelect_range();		if(range.indexOf("个人")>-1){			applicants.setCreateAccount(getAccount());		}					List<NvhlApplicantVO> applcantList = getNvhlApplicantService().selectList(applicants);		handleAttr(applcantList);		request.setAttribute("applcantList", applcantList);				base.setCProdNo(CProdNo);		base.setNAmt(Double.parseDouble(nAmt));		base.setNPrm(Double.parseDouble(nPrm));		secure.setOccPropFlag(occPropFlag);		model.addAttribute("secure",secure);		model.addAttribute("common",common);		model.addAttribute("base", base);		model.addAttribute("applicantVO", applicantVO);		model.addAttribute("insuredVO", insuredVO);				//调用方法初始化级联下拉框		selectInit(model);		return page_toPay;	}		/**	 * 2017年3月13日	 * 查询营业性质/动态查询行业类型清单方法供每次返回page_toPay页面前调用	 * @author YC	 */	public void selecTnatureOfBusiness(ModelMap model ,String pcode){		//查询全部营业性质		String p_code = SystemManager.getInstance().getProperty("Ypcode");	//父节点pid赋值SQ000		model.addAttribute("dicList",keyvalueService.selectAllByPcode(p_code));		//查询行业类型清单(返回页面默认展示p_code=SQ201_1的数据)		//String p_code_h="SQ201";//父节点pid赋值SQ201_1		List list = keyvalueService.selectAllByCascade(pcode);		model.addAttribute("hylxList", list);	}		/**	 * 初始化级联下拉框方法 	 */	public void selectInit(ModelMap model){		//查询全部营业性质		String p_code = SystemManager.getInstance().getProperty("Ypcode");//父节点pid赋值SQ000		model.addAttribute("dicList",keyvalueService.selectAllByPcode(p_code));		//查询行业类型清单(返回页面默认展示p_code=SQ201_1的数据)		String p_code_h=SystemManager.getInstance().getProperty("Hpcode");//父节点pid赋值SQ201		List list = keyvalueService.selectAllByCascade(p_code_h);		model.addAttribute("hylxList", list); 	}		/**	 * 异步实现改变级联下拉框功能	 * 2017年3月9日	 * @author YC	 * @param request	 * @return String 	 * @throws Exception	 */	@ResponseBody	@RequestMapping(value="toChangeSelect")	public String toChangeSelect(HttpServletRequest request ,ModelMap model,HttpServletResponse res,@ModelAttribute("common") NvhlCommonVO common)throws Exception{		//获取url中参数pcode 		String pcode = request.getParameter("pcode");		List list = keyvalueService.selectAllByCascade(pcode);		String json = JSON.toJSONString(list);		res.setCharacterEncoding("utf-8");		res.getWriter().print(json);		model.addAttribute("common", common);		return null;	}	/**	* @param	* @Description: TODO(拼接名字=证件号：名字) 	* @author lyx	* @date 2016年10月26日 下午1:09:36 	* @return String    返回类型 	* @throws	 */	public List<NvhlApplicantVO> handleAttr(List<NvhlApplicantVO> e){		if(e != null && e.size()>0){			for(int i=0;i<e.size();i++){				e.get(i).setAppNme(e.get(i).getCertfCde()+" : "+e.get(i).getAppNme());			}		}				return e;	}	/**	 * 	* @param	* @Description: 获得电子保单状态	* @author sunshuo	* @date 2017年1月5日 下午2:15:43 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "getUndwrStatus",method = RequestMethod.POST)	public String getUndwrStatus(){		//String returnJson = WebService1000(interfaceUrl,packageList);		//最底层 packageList		Map outerMap = new LinkedHashMap();		Map dataTranAreaMap = new LinkedHashMap();		Map queryPlyVOMap = new LinkedHashMap();						SystemSetting systemSetting = SystemManager.getInstance().getSystemSetting();	    String tradtype = SystemManager.getInstance().getProperty("tradtype1000");	    String appnoflag = SystemManager.getInstance().getProperty("appnoflag");	    	    String cpasswd = SystemManager.getInstance().getProperty("cpasswd1000");	    String coperid = SystemManager.getInstance().getProperty("coperid1000");	    queryPlyVOMap.put("CAppNo",null);	    queryPlyVOMap.put("CCertfCde",null);	    queryPlyVOMap.put("CCertfCls",null);	    queryPlyVOMap.put("CInsuredNme",null);	    queryPlyVOMap.put("CPlyNo",null);	    queryPlyVOMap.put("entryObjList",null);	    		dataTranAreaMap.put("cancelPlyVO", null);		String[]packageListMapObject = {};			dataTranAreaMap.put("packageList", packageListMapObject);		dataTranAreaMap.put("packageVO", null);		dataTranAreaMap.put("queryAppVO", null);				dataTranAreaMap.put("queryPlyVO", queryPlyVOMap);		dataTranAreaMap.put("tradType", tradtype);		//dataTranAreaMap.put("appNoFlag", appnoflag);//传3，是否返回投保单号标志							telTradeRequestVO ttr = getDefaultTelTradeRequest(tradtype,dataTranAreaMap);					outerMap.put("telTradeRequestVO",ttr);		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd(cpasswd);		teloper.setAccequ("");		teloper.setCOperId(coperid);		teloper.setOperTm("");		teloper.setIp("");		teloper.setMacAddress("");				outerMap.put("telOperVO", teloper);		outerMap.put("telTradeRtnVO",null);		JSONObject json = JSONObject.fromObject(outerMap);		Object insuredJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("insuredVO").remove("list");				return "0";	}	/**	* @param	* @Description: TODO(提交用户信息 判定是否符合 接口1000) 	* @author lyx	* @date 2016年10月26日 下午1:09:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "toCommit", method = RequestMethod.POST)	public String toCommit(HttpServletResponse res,HttpServletRequest request, @ModelAttribute("secure") SecureProduct secure, @ModelAttribute("common") NvhlCommonVO common,@ModelAttribute("base") NvhlBaseVO base,			ModelMap model,@ModelAttribute("applicantVO") NvhlApplicantVO applicantVO,@ModelAttribute("insuredVO") NvhlInsuredVO insuredVO, RedirectAttributes flushAttrs , Keyvalue keyvalue ,SecureProductDetail secureProductDetail) throws Exception {						String pcode = keyvalue.getKey1();		//获取产品号		String No = base.getCProdNo();		//获取当前产品主键id		//String id=request.getParameter("id");		//1000接口地址        SystemSetting systemSetting = SystemManager.getInstance().getSystemSetting();        String interfaceUrl = SystemManager.getInstance().getProperty("interfaceUrl");		//String url = "http://60.212.43.251:6001/telnetscs/services/totalInterfaceParseNode?wsdl"; //clientCodeAndAppNo（--1000接口）        UUIDGeneratorUtil uuidCreate=new UUIDGeneratorUtil();                Map packageList = setJson1000(base,applicantVO,insuredVO,common);		try{			String returnJson = WebService1000(interfaceUrl,packageList);			if(returnJson == ""){				model.addAttribute("message", "连接超时，请重新提交！");								//调用方法查询全部营业性质/根据pcode查询级联的行业类型清单				selecTnatureOfBusiness(model,pcode);				if("010001".equals(No)){					model.addAttribute("common",common);				}else{					//返回页面后的回显操作					model.addAttribute("cbqy",common.getTcbqy());					model.addAttribute("yycs",common.getTyycs());					model.addAttribute("zip",common.getTzip());					model.addAttribute("pcode", keyvalue.getP_code());					model.addAttribute("common",common);				}				return page_toPay;			}			String cAppNo = "";			String appCde = "";			String insuredCde ="";			JSONObject jo = null;			if(returnJson.contains("telTradeRtnVO")){				jo = JSONObject.fromObject(returnJson);					//投保单号 投保人代码 被保人编码 				JSONObject packageListObject = jo.getJSONObject("telTradeRtnVO").getJSONObject("dataTranArea");				//获取resultVO				JSONObject resultVO = jo.getJSONObject("telTradeRtnVO").getJSONObject("resultVO");				//判断如果resultCode为0的话返回支付页面并给予错误提示				if("0".equals(resultVO.getString("resultCode"))){					String wrongInfo = resultVO.get("resultInfo").toString();					model.addAttribute("message", wrongInfo);					selecTnatureOfBusiness(model,pcode);					if("010001".equals(No)){						model.addAttribute("common",common);					}else{						//返回页面后的回显操作						model.addAttribute("cbqy",common.getTcbqy());						model.addAttribute("yycs",common.getTyycs());						model.addAttribute("zip",common.getTzip());						model.addAttribute("pcode", keyvalue.getP_code());						model.addAttribute("common",common);					}					return page_toPay; 									}				else{					cAppNo = packageListObject.getJSONArray("packageList").getJSONObject(0).getJSONObject("baseVO").get("CAppNo").toString();					appCde = packageListObject.getJSONArray("packageList").getJSONObject(0).getJSONObject("applicantVO").get("appCde").toString();					insuredCde = packageListObject.getJSONArray("packageList").getJSONObject(0).getJSONObject("insuredVO").get("insuredCde").toString();				}			}else{				model.addAttribute("message", "验证失败！");								//调用方法查询全部营业性质				selecTnatureOfBusiness(model,pcode);				if("010001".equals(No))				{					model.addAttribute("common",common);				}else{					//返回页面后的回显操作					model.addAttribute("cbqy",common.getTcbqy());					model.addAttribute("yycs",common.getTyycs());					model.addAttribute("zip",common.getTzip());					model.addAttribute("pcode", keyvalue.getP_code());					model.addAttribute("common",common);				}				return page_toPay;			}									//返回码 			//resultCode=0调用接口失败			String resultCode = jo.getJSONObject("telTradeRtnVO").getJSONObject("resultVO").get("resultCode").toString();			String resultInfo = jo.getJSONObject("telTradeRtnVO").getJSONObject("resultVO").get("resultInfo").toString();						if(StringUtils.isNotBlank(resultCode) && resultCode.equals("0")){				model.addAttribute("message", "验证失败！"+resultInfo);								//调用方法查询全部营业性质				selecTnatureOfBusiness(model,pcode);				if("010001".equals(No)){					model.addAttribute("common",common);				}else{					//返回页面后的回显操作					model.addAttribute("cbqy",common.getTcbqy());					model.addAttribute("yycs",common.getTyycs());					model.addAttribute("zip",common.getTzip());					model.addAttribute("pcode", keyvalue.getP_code());					model.addAttribute("common",common);				}				return page_toPay;						}					//投保人代码	 			applicantVO.setAppCde(appCde);			//被保人代码			insuredVO.setInsuredCde(insuredCde);						//获取产品信息（by 产品编码）			secure.setDeleteFlag(0);					secure.setCProdNo(base.getCProdNo());			SecureProduct currentSecure = secureProductService.selectOne(secure);			//保存订单，订单状态为 2:客户信息验证中			base.setSerialNumber(uuidCreate.getSrcUUID());//流水号			base.setCAppNo(cAppNo);//投保单号						//把时间处理成和投保单一样的			base.setTInsrncBgnTm(DateTimeUtil.formatDate(base.getTInsrncBgnTm(), "next"));//起期					base.setTInsrncEndTm(DateTimeUtil.formatDate(base.getTInsrncEndTm(), "last"));//止期			//base.setCSlsNme(LoginUserHolder.getLoginUser().getNickname());//业务员名称			//填充 被保人 投保人实体 base订单 信息（for insert）			setCommonProperty(applicantVO,common);			setCommonProperty(insuredVO,common);			setNvhlBaseProperty(base,currentSecure,applicantVO,insuredVO);			try{				int baseNum = getNvhlBaseService().insert(base);							int applicantVONum = getNvhlBaseService().insertApplication(applicantVO);				int insuredVONum = getNvhlBaseService().insertInsured(insuredVO);				logger.info("第"+baseNum + "条记录插入 base表");				logger.info(applicantVONum + "条记录插入 applicantVO 投保人信息表");				logger.info(insuredVONum + "条记录插入 insuredVO 被保人信息表");			} catch (Exception e){				e.printStackTrace();			}						model.addAttribute("sercureDetail",secureProductDetail);			model.addAttribute("secure",secure);			model.addAttribute("common",common);			model.addAttribute("base", base);			model.addAttribute("applicantVO", applicantVO);			model.addAttribute("insuredVO", insuredVO);			model.addAttribute("message", "验证成功，请支付！");								//调用方法查询全部营业性质			selecTnatureOfBusiness(model,pcode);			if("010001".equals(No)){				//保存财产险标的信息的两个字段到数据库中 为后面的setjson1003做准备				NvhCollectCommonVO collectComm=new NvhCollectCommonVO();				collectComm.setcAppNo(cAppNo);				collectComm.settIfoZip(common.gettIfoZip());				collectComm.settIfoAddress(common.gettIfoAddress());				CollectCommService.insertTifoMesaage(collectComm);				model.addAttribute("common",common);			}else{				//向数据库插入从页面获取的数据为后面的setjson1003做准备				NvhCollectCommonVO collectComm=new NvhCollectCommonVO();				collectComm.setcAppNo(cAppNo);				collectComm.setYyxzKey(common.getKey1());				collectComm.setHylxKey(common.getP_code());				collectComm.setYycs(common.getTyycs());				collectComm.setCbqy(common.getTcbqy());				collectComm.setZip(common.getTzip());				CollectCommService.insert(collectComm);				//返回页面后的回显操作				model.addAttribute("cbqy",common.getTcbqy());				model.addAttribute("yycs",common.getTyycs());				model.addAttribute("zip",common.getTzip());				model.addAttribute("pcode", keyvalue.getP_code());				model.addAttribute("common",common);			}		}		catch(Exception e){			e.printStackTrace();		}				//调用方法查询全部营业性质				selecTnatureOfBusiness(model,pcode);				if("010001".equals(No)){					model.addAttribute("common",common);				}else{					//返回页面后的回显操作					model.addAttribute("cbqy",common.getTcbqy());					model.addAttribute("yycs",common.getTyycs());					model.addAttribute("zip",common.getTzip());					model.addAttribute("pcode", keyvalue.getP_code());					model.addAttribute("common",common);				}		return page_toPay;	}		/**	 * 	* @param	* @Description: 1000接口参数：基本信息NvhlBaseVO的赋值	* @author sunshuo	* @date 2016年11月21日 下午2:23:49 	* @return NvhlBaseVOJson    返回类型 	* @throws	 */	public Map setJson1000(NvhlBaseVO base,NvhlApplicantVO applicantVO,NvhlInsuredVO insuredVO,NvhlCommonVO common){				//新建对象		NvhlApplicantVOJson applicantVOJson = new NvhlApplicantVOJson();		NvhlBaseVOJson baseVOJson = new NvhlBaseVOJson();		NvhlInsuredVOJson insuredVOJson = new NvhlInsuredVOJson();				//NvhlApplicantVOJson		applicantVOJson.setAppNme(applicantVO.getAppNme());		applicantVOJson.setCertfCde(common.getTCertfCde());		applicantVOJson.setCertfCls(common.getTCertfCls());				//NvhlInsuredVOJson赋值		SystemSetting systemSetting = SystemManager.getInstance().getSystemSetting();        String cdptcde = SystemManager.getInstance().getProperty("cdptcde");		baseVOJson.setCDptCde(cdptcde);		baseVOJson.setCProdNo(base.getCProdNo());		if(base.getNAmt() != null){			baseVOJson.setNAmt(base.getNAmt().toString());//保额合计					}else{			baseVOJson.setNAmt("");//保额合计		}		if(base.getNPrm() != null){			baseVOJson.setNPrm(base.getNPrm().toString());//保费合计					}else{			baseVOJson.setNPrm("");//保费合计		}		baseVOJson.setSerialNumber(base.getSerialNumber());		//NvhlInsuredVOJson赋值		insuredVOJson.setInsuredNme(insuredVO.getInsuredNme());		insuredVOJson.setCCertfCde(common.getBCCertfCde());		insuredVOJson.setCCertfCls(common.getBCCertfCls());				//---------------packageListMap--------------------		Map packageListMap = new HashMap();				packageListMap.put("insuredVO", insuredVOJson);				packageListMap.put("applicantVO", applicantVOJson);		packageListMap.put("baseVO", baseVOJson);		//---------------packageListMap *****--------------				return packageListMap;				}	/**	 * 	* @param	* @Description: 1001接口参数：基本信息NvhlBaseVO的赋值	* @author sunshuo	* @date 2016年11月21日 下午2:23:49 	* @return NvhlBaseVOJson    返回类型 	* @throws	 */	public Map setJson1001(NvhlBaseVO base,NvhlApplicantVO applicantVO,NvhlInsuredVO insuredVO,NvhlCommonVO common){		//新建对象		NvhlApplicantVOJson applicantVOJson = new NvhlApplicantVOJson();		NvhlBaseVOJson baseVOJson = new NvhlBaseVOJson();		NvhlInsuredVOJson insuredVOJson = new NvhlInsuredVOJson();		//从配置文件里取常量		SystemSetting systemSetting = SystemManager.getInstance().getSystemSetting();        String datasource = SystemManager.getInstance().getProperty("datasource");        String paytype = SystemManager.getInstance().getProperty("paytype");        String payway = SystemManager.getInstance().getProperty("payway");        String backurl = SystemManager.getInstance().getProperty("backurl")+getAccount();        String subcompany = SystemManager.getInstance().getProperty("subcompany");        String currencytype = SystemManager.getInstance().getProperty("currencytype");        String departmentcode = SystemManager.getInstance().getProperty("departmentcode");        String tradtype = SystemManager.getInstance().getProperty("tradtype1001");		Map <String,Object>dataTranArea = new LinkedHashMap<String,Object>();					Map<String,Object> baseVOMap = new LinkedHashMap<String,Object>();				DetailsVO detailsVo = new DetailsVO();		detailsVo.setApplicantNo(base.getCAppNo());		detailsVo.setApplicantCode(applicantVO.getAppCde());		detailsVo.setApplicantName(applicantVO.getAppNme());		detailsVo.setInsuredCode(insuredVO.getInsuredCde());		detailsVo.setInsuredName(insuredVO.getInsuredNme());		detailsVo.setCustseq(base.getSerialNumber());				detailsVo.setStartDate(base.getTInsrncBgnTm());//起保（生效）日期		detailsVo.setDataSource(datasource);		detailsVo.setInstallmenrsTimes("");		JSONArray detailsList = JSONArray.fromObject(detailsVo);			String[]emptyArr = {};				baseVOMap.put("amount", base.getNPrm());//交易金额		baseVOMap.put("payType",paytype);//支付类型		baseVOMap.put("checkNo","");//支票号		baseVOMap.put("payWay",payway);	//支付方式			//baseVOMap.put("backUrl","http://goldenet.nat123.net/jshop/manage/NvhlBase/selectOrderList?payReturnFlag=true");		baseVOMap.put("backUrl",backurl);		String nowDate = DateTimeUtil.getDateNowByExpression("yyyy-MM-dd hh:mm:ss");		baseVOMap.put("policyStartdate", DateTimeUtil.getNextOrLastDayCombine(nowDate,"next"));//过期时间当天的24点		baseVOMap.put("subCompany",subcompany);//分公司代码		baseVOMap.put("currencyType",currencytype);//币种		baseVOMap.put("insuredName",insuredVO.getInsuredNme());//缴费人名称		baseVOMap.put("departmentCode",departmentcode);//业务归属部门		baseVOMap.put("entryObjList",emptyArr); 				dataTranArea.put("baseVO", baseVOMap);		dataTranArea.put("detailsList", detailsList);		dataTranArea.put("entryObjList",emptyArr);		dataTranArea.put("packageVO", null);		dataTranArea.put("tradType",tradtype);		return dataTranArea;			}	/**	 * 	* @param	* @Description: 1000接口参数：基本信息NvhlBaseVO的赋值	* @author sunshuo	* @date 2016年11月21日 下午2:23:49 	* @return NvhlBaseVOJson    返回类型 	* @throws	 */	public Map setJson1003(NvhlBaseVO base,NvhlApplicantVO applicantVO,NvhlInsuredVO insuredVO,NvhlCommonVO common,List nvhlCvrgVOList,Keyvalue keyvalue,NvhCollectCommonVO collectComm){		//新建对象		NvhlApplicantVOJson applicantVOJson = new NvhlApplicantVOJson();		NvhlBaseVOJson baseVOJson = new NvhlBaseVOJson();		NvhlInsuredVOJson insuredVOJson = new NvhlInsuredVOJson();				//从配置文件里取常量		SystemSetting systemSetting = SystemManager.getInstance().getSystemSetting();        String occupcde = SystemManager.getInstance().getProperty("occupcde");        String cdisptsttlcd = SystemManager.getInstance().getProperty("cdisptsttlcd");        String cneedfeeflag = SystemManager.getInstance().getProperty("cneedfeeflag");        String cdptcde = SystemManager.getInstance().getProperty("cdptcde");        String cdptcnm = SystemManager.getInstance().getProperty("cdptcnm");        String sysres = SystemManager.getInstance().getProperty("sysres");                String CBsnsTyp = SystemManager.getInstance().getProperty("CBsnsTyp");        String CChaType = SystemManager.getInstance().getProperty("CChaType");                        String CChaSubtype = SystemManager.getInstance().getProperty("CChaSubtype");        String COprCde = SystemManager.getInstance().getProperty("COprCde");        String CSlsId = SystemManager.getInstance().getProperty("CSlsId");        String CSlsNme = SystemManager.getInstance().getProperty("CSlsNme");        String CBrkrCde = SystemManager.getInstance().getProperty("CBrkrCde");        String CAgtAgrNo = SystemManager.getInstance().getProperty("CAgtAgrNo");         String CUnfixSpc1 = SystemManager.getInstance().getProperty("CUnfixSpc1");// 财产险   特约字段        String CUnfixSpc2 = SystemManager.getInstance().getProperty("CUnfixSpc2");// 责任险   特约字段        String AgriMak = SystemManager.getInstance().getProperty("AgriMak");        String CWaterMark = SystemManager.getInstance().getProperty("CWaterMark");                        String FinTyp = SystemManager.getInstance().getProperty("FinTyp");        String CCiMrk = SystemManager.getInstance().getProperty("CCiMrk");        String CGrpMrk = SystemManager.getInstance().getProperty("CGrpMrk");                String EfcManualFlag = SystemManager.getInstance().getProperty("EfcManualFlag");        String CPlyTyp = SystemManager.getInstance().getProperty("CPlyTyp");       // String CHealthMrk = SystemManager.getInstance().getProperty("CHealthMrk");        //String NTransactionNo = SystemManager.getInstance().getProperty("NTransactionNo");		//NvhlApplicantVOJson		if(common != null){			applicantVOJson.setAppCde(applicantVO.getAppCde());			applicantVOJson.setAppNme(applicantVO.getAppNme());			applicantVOJson.setCertfCde(common.getTCertfCde());			applicantVOJson.setCertfCls(common.getTCertfCls());			applicantVOJson.setClntMrk(common.getTClntMrk());			applicantVOJson.setClntAddr(common.getTClntAddr());;			applicantVOJson.setEmail(common.getTEmail());			applicantVOJson.setZipCde(common.getTZipCde());			applicantVOJson.setMobile(common.getTMobile());			applicantVOJson.setCountry(common.getTCountry());			applicantVOJson.setCusRiskLvl(common.getTCusRiskLvl());			applicantVOJson.setCustRiskRank(common.getTCustRiskRank());					}else{			applicantVOJson.setAppCde(applicantVO.getAppCde());			applicantVOJson.setAppNme(applicantVO.getAppNme());			applicantVOJson.setCertfCde(applicantVO.getCertfCde());			applicantVOJson.setCertfCls(applicantVO.getCertfCls());			applicantVOJson.setClntMrk(applicantVO.getClntMrk());			applicantVOJson.setClntAddr(applicantVO.getClntAddr());;			applicantVOJson.setEmail(applicantVO.getEmail());			applicantVOJson.setZipCde(applicantVO.getZipCde());			applicantVOJson.setMobile(applicantVO.getMobile());			applicantVOJson.setCountry(applicantVO.getCountry());			applicantVOJson.setCusRiskLvl(applicantVO.getCusRiskLvl());			applicantVOJson.setCustRiskRank(applicantVO.getCustRiskRank());			applicantVOJson.setOccupCde(occupcde);//执业类型		}		//NvhlBaseVOJson赋值		baseVOJson.setSerialNumber(base.getSerialNumber());		baseVOJson.setCDisptSttlCde(cdisptsttlcd);//争议处理b:诉讼、		baseVOJson.setCNeedfeeFlag(cneedfeeflag);//是否规定见费出单标志1:见费出单		baseVOJson.setCDptCde(cdptcde);//机构代码		baseVOJson.setCDptCnm(cdptcnm);		baseVOJson.setSysRes(sysres);//系统来源		baseVOJson.setCProdNo(base.getCProdNo());//产品代码		baseVOJson.setCBsnsTyp(CBsnsTyp);//业务类型		baseVOJson.setCChaType(CChaType);//渠道中级分类		baseVOJson.setCChaSubtype(CChaSubtype);//渠道子类		baseVOJson.setCOprCde(COprCde);//录单人		baseVOJson.setCSlsId(CSlsId);//业务员工号		baseVOJson.setCSlsNme(CSlsNme);		baseVOJson.setCBrkSlsCde("");//代理业务员		baseVOJson.setCBrkSlsNme("");//代理业务员名称		baseVOJson.setCCertfNo("");//代理业务职业证号		baseVOJson.setCBrkrCde(CBrkrCde);//代理人		baseVOJson.setCAgtAgrNo(CAgtAgrNo);//代理合作协议		if("010001".equals(base.getCProdNo())){			baseVOJson.setCUnfixSpc(CUnfixSpc1);//特别约定			baseVOJson.setRenewMrk(SystemManager.getInstance().getProperty("RenewMrk"));//是否续保标志			baseVOJson.setCardSheTyp(SystemManager.getInstance().getProperty("CardSheTyp"));//卡折类型			baseVOJson.setCardSheNo(SystemManager.getInstance().getProperty("CardSheNo"));//卡折号码			//备注 			baseVOJson.setRemark(SystemManager.getInstance().getProperty("Remark"));		}		if("040001".equals(base.getCProdNo())){			baseVOJson.setCUnfixSpc(CUnfixSpc2);//特别约定		}				//占用性质 第一级工业baseVOJson.setOccProp(base.getOccProp());		baseVOJson.setAgriMak(AgriMak);//涉农标志：否		baseVOJson.setCWaterMark(CWaterMark);//是否涉海：否		baseVOJson.setFinTyp(FinTyp);//缴费方式：5转账缴费		baseVOJson.setCCiMrk(CCiMrk);//共保业务				baseVOJson.setNAmtRmbExch(base.getNAmtRmbExch());//保额币种		baseVOJson.setNPrmRmbExch(base.getNPrmRmbExch());//保费币种		baseVOJson.setTAppTm(base.getTAppTm());//投保日期//		baseVOJson.setTInsrncBgnTm(DateTimeUtil.getNextOrLastDayCombine(base.getTInsrncBgnTm(), "next"));//起期		//		baseVOJson.setTInsrncEndTm(DateTimeUtil.getNextOrLastDayCombine(base.getTInsrncEndTm(), "last"));//止期		//1000的时候时间处理过了		baseVOJson.setTInsrncBgnTm(base.getTInsrncBgnTm());		baseVOJson.setTInsrncEndTm(base.getTInsrncEndTm());		baseVOJson.setCGrpMrk(CGrpMrk);//团单标识：个单		baseVOJson.setEfcManualFlag(EfcManualFlag);//是否转人工标识				baseVOJson.setCPlyTyp(CPlyTyp);//保单形式：电子报单		//baseVOJson.setICopyNum("");//份数		baseVOJson.setCAppNo(base.getCAppNo());//投保单号		if(base.getNAmt() != null){			baseVOJson.setNAmt(base.getNAmt().toString());//保额合计					}else{			baseVOJson.setNAmt("");//保额合计		}		if(base.getNPrm() != null){			baseVOJson.setNPrm(base.getNPrm().toString());//保费合计					}else{			baseVOJson.setNPrm("");//保费合计		}		baseVOJson.setTIssueTm(DateTimeUtil.getDateNowByExpression("yyyy-MM-dd"));//						baseVOJson.setEntryObjList(null);		//NvhlInsuredVOJson赋值		if(common != null){			insuredVOJson.setInsuredCde(insuredVO.getInsuredCde());			insuredVOJson.setInsuredNme(insuredVO.getInsuredNme());			insuredVOJson.setCCertfCde(common.getBCCertfCde());			insuredVOJson.setCCertfCls(common.getBCCertfCls());					insuredVOJson.setClntMrk(common.getBClntMrk());			insuredVOJson.setClntAddr(common.getBClntAddr());;			insuredVOJson.setCEmail(common.getBCEmail());			insuredVOJson.setZipCde(common.getBZipCde());			insuredVOJson.setMobile(common.getBMobile());			insuredVOJson.setCountry(common.getBCountry());			insuredVOJson.setCusRiskLvl(common.getBCusRiskLvl());			insuredVOJson.setCustRiskRank(common.getBCustRiskRank());		}else{			insuredVOJson.setInsuredCde(insuredVO.getInsuredCde());			insuredVOJson.setInsuredNme(insuredVO.getInsuredNme());			insuredVOJson.setCCertfCde(insuredVO.getCcertfCde());			insuredVOJson.setCCertfCls(insuredVO.getCcertfCls());					insuredVOJson.setClntMrk(insuredVO.getClntMrk());			insuredVOJson.setClntAddr(insuredVO.getClntAddr());;			insuredVOJson.setCEmail(insuredVO.getCemail());			insuredVOJson.setZipCde(insuredVO.getZipCde());			insuredVOJson.setMobile(insuredVO.getMobile());			insuredVOJson.setCountry(insuredVO.getCountry());			insuredVOJson.setCusRiskLvl(insuredVO.getCusRiskLvl());			insuredVOJson.setCustRiskRank(insuredVO.getCustRiskRank());		}		Map packageList = new LinkedHashMap();				//Map cvrgList=new LinkedHashMap();		Map payList = new LinkedHashMap();		//---------------dataTranArea--------------------		String[]emptyArr = {};						payList.put("NTms","1");//期次		payList.put("CProdNo", base.getCProdNo());//产品编号		payList.put("NEdrPrjNo", "");//批改次数				payList.put("CPayorNme", applicantVO.getAppNme());//付款人姓名		payList.put("CPayorCde", applicantVO.getAppCde());//付款人代码		payList.put("NPayablePrm", base.getNPrm());//应付保费		String nowDate = DateTimeUtil.getDateNowByExpression("yyyy-MM-dd hh:mm:ss");		payList.put("TPayBgnTm", nowDate);//缴费起始日期				payList.put("TPayEndTm", DateTimeUtil.getNextOrLastDay(nowDate,"next"));//缴费截止日期		payList.put("TPaidTm", null);//		payList.put("CRecptNo", "");//				payList.put("NPaidPrm", base.getNPrm());//实收保费		payList.put("CCurCde", base.getNPrmRmbExch());//付款币种			payList.put("NPayNo", base.getPayNo());//支付申请号 		payList.put("CBankCde", "");//开户银行 		payList.put("entryObjList", null);//扩展信息				Object[]payListArr={payList};				//packageList.put("packageNO","");		//packageList.put("undrOpnVo", null);		packageList.put("applicantVO", applicantVOJson);		packageList.put("insuredVO", insuredVOJson);				packageList.put("cvrgList", nvhlCvrgVOList);		//packageList.put("tgtObjList", emptyArr);		packageList.put("feeList", emptyArr);		packageList.put("acctinfoVO",null);		packageList.put("baseVO", baseVOJson);		//营业性质		JSONObject entryObjList = new JSONObject();		JSONArray entryObjArray = new JSONArray();				//判断是不是财产险		if("010001".equals(base.getCProdNo())){		JSONObject traTypeObject = new JSONObject();		traTypeObject.put("key", "traType");		traTypeObject.put("value", base.getOccProp());//占用性质 第一级工业		entryObjArray.add(traTypeObject);		}else{			JSONObject yyxzObject = new JSONObject();//营业性质			yyxzObject.put("key", "yyxz");			yyxzObject.put("value", collectComm.getYyxzKey());			JSONObject hylxObject = new JSONObject();//行业类型			hylxObject.put("key", "hylx");			if(null != collectComm.getHylxKey() && !"".equals(collectComm.getHylxKey().trim()));			{				hylxObject.put("value", collectComm.getHylxKey().substring(8));//keyvalue.getP_code().substring(8)			}						JSONObject yyxzqdObject = new JSONObject();//营业性质清单			yyxzqdObject.put("key", "yyxzqd");			if(null != collectComm.getHylxKey() && !"".equals(collectComm.getHylxKey().trim()))			{				yyxzqdObject.put("value", collectComm.getHylxKey().substring(0, 7));			}						JSONObject cbqyObject = new JSONObject();//承保区域			cbqyObject.put("key", "cbqy");			cbqyObject.put("value", collectComm.getCbqy());			JSONObject zipEntryObject = new JSONObject();//邮编			zipEntryObject.put("key", "zip");			zipEntryObject.put("value", collectComm.getZip());			JSONObject yycsObject = new JSONObject();//营业场所地址			yycsObject.put("key", "yycs");			yycsObject.put("value", collectComm.getYycs());			entryObjArray.add(yyxzObject);			entryObjArray.add(hylxObject);			entryObjArray.add(yyxzqdObject);			entryObjArray.add(cbqyObject);			entryObjArray.add(zipEntryObject);			entryObjArray.add(yycsObject);		}												entryObjList.put("entryObjList", entryObjArray);				packageList.put("tgtVO", entryObjList);				packageList.put("bnfcList",emptyArr);		packageList.put("grpMemberList", emptyArr);				packageList.put("payList", payListArr);			//标的地址		JSONObject addressObject = new JSONObject();		addressObject.put("key","address");		addressObject.put("value",collectComm.gettIfoAddress());		JSONObject zipObject = new JSONObject();		zipObject.put("key","zip");		zipObject.put("value",collectComm.gettIfoZip());		JSONObject seqObject = new JSONObject();		seqObject.put("key","seq");		seqObject.put("value","1");		JSONArray addressAndZipArray = new JSONArray();		addressAndZipArray.add(zipObject);		addressAndZipArray.add(addressObject);		addressAndZipArray.add(seqObject);		JSONObject addressAndZipAllObject = new JSONObject();		JSONArray addressAndZipAllArray = new JSONArray();		addressAndZipAllObject.put("CType", "entTgt");		addressAndZipAllObject.put("entryObjList", addressAndZipArray);		addressAndZipAllArray.add(addressAndZipAllObject);				if("010001".equals(base.getCProdNo())){			packageList.put("nvhlObjList", addressAndZipAllArray);		}else{			packageList.put("nvhlObjList", new JSONArray());		}				//packageList.put("tradType", "");		//packageList.put("entryObjList", null)；不传递			return packageList;	}		/**	 * 	* @param	* @Description: 支付 处理	* 	1.拼接json 串 调用1000接口	*	2.根据产品code 获取产品信息	*	3.封装base对象 	*	4.插入base对象（订单） 投保人、 被保人对象 	* @author sunshuo	* @date 2016年10月21日 上午10:40:21 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value="toPay", method = RequestMethod.POST)	public String toPay(HttpServletRequest request, HttpServletResponse response,@ModelAttribute("secure") SecureProduct secure, @ModelAttribute("common") NvhlCommonVO common,@ModelAttribute("base") NvhlBaseVO base,			ModelMap model,@ModelAttribute("applicantVO") NvhlApplicantVO applicantVO,@ModelAttribute("insuredVO") NvhlInsuredVO insuredVO, RedirectAttributes flushAttrs,Keyvalue keyvalue) throws Exception {										String no=base.getCProdNo();		//获取表单页面下拉框的pcode属性为查询营业性质做准备		String pcode=keyvalue.getKey1();		//1001个接口			        try {			SystemSetting systemSetting = SystemManager.getInstance().getSystemSetting();			String interfaceUrl = SystemManager.getInstance().getProperty("interfaceUrl");			//String url1001 = "http://60.212.43.251:6001/telnetscs/services/totalInterfaceParseNode?wsdl"; //getPayNo（--1001接口）			Map dataTranArea = setJson1001(base, applicantVO, insuredVO, common);			//调用支付申请号			String payNoResult = WebService1001(interfaceUrl,dataTranArea);				if(payNoResult == ""||(!payNoResult.contains("telTradeRtnVO"))){				model.addAttribute("message", "获取支付申请号失败，请重新填写！");								//调用方法查询全部营业性质/根据pcode查询级联的行业类型清单				selecTnatureOfBusiness(model,pcode);				if("010001".equals(no))				{					model.addAttribute("common",common);				}else				{					//返回页面后的回显操作					model.addAttribute("cbqy",common.getTcbqy());					model.addAttribute("yycs",common.getTyycs());					model.addAttribute("zip",common.getTzip());					model.addAttribute("pcode", keyvalue.getP_code().substring(0, 7));					model.addAttribute("common",common);				}								return page_toPay;			}						JSONObject payNoJson = JSONObject.fromObject(payNoResult);			//返回码 			String resultCode = payNoJson.getJSONObject("telTradeRtnVO").getJSONObject("resultVO").get("resultCode").toString();			//错误信息 			String resultInfo = payNoJson.getJSONObject("telTradeRtnVO").getJSONObject("resultVO").get("resultCode").toString();					//resultCode=0调用接口失败			if(StringUtils.isNotBlank(resultCode) && resultCode.equals("0")){								model.addAttribute("message", "获取支付申请号失败！"+resultInfo);									}			else{				//从json对象中解析出支付申请号 				String payNo = payNoJson.getJSONObject("telTradeRtnVO").getJSONObject("dataTranArea").getJSONObject("packageVO").get("payNo").toString();												//1002个接口地址			    String payUrl = SystemManager.getInstance().getProperty("payUrl")+payNo;				model.addAttribute("payUrl", payUrl);				//把支付申请号更新到订单中				base.setPayNo(payNo);				base.setStatus("1");//1：支付中				base.setUpdateAccount(getAccount());								try {					//获取支付号后，此时订单状态为支付中，并且更新订单					int baseNum = getNvhlBaseService().updatePayNo(base);									} catch (Exception e) {									e.printStackTrace();				}					}		} catch (Exception e) {			// TODO Auto-generated catch block			e.printStackTrace();		}        	        //调用方法查询全部营业性质/根据pcode查询级联的行业类型清单		selecTnatureOfBusiness(model,pcode);		if("010001".equals(no))		{			model.addAttribute("common",common);		}else		{			//返回页面后的回显操作			model.addAttribute("cbqy",common.getTcbqy());			model.addAttribute("yycs",common.getTyycs());			model.addAttribute("zip",common.getTzip());			model.addAttribute("pcode", keyvalue.getP_code().substring(0, 7));			model.addAttribute("common",common);		}		return page_toPay;	}		/**	 * 	* @param	* @Description:设置基本信息NvhlBaseVO	* @author sunshuo	* @date 2016年10月21日 下午3:15:47 	* @return void 	* @throws	 */	public void  setNvhlBaseProperty(NvhlBaseVO base,SecureProduct currentSecure,NvhlApplicantVO app ,NvhlInsuredVO ins){		base.setCProdName(currentSecure.getCProdName()); //险种名称		base.setCProdNo(currentSecure.getCProdNo()); //险种代码		base.setNAmtRmbExch(currentSecure.getNAmtRmbExch());//保额币种		base.setNAmt(currentSecure.getNAmt());//保额合计		base.setNPrmRmbExch(currentSecure.getNPrmRmbExch());//保费币种		base.setNPrm(currentSecure.getNPrm());//保费合计			base.setAppCde(app.getAppCde()); //投保人编码		base.setAppNme(app.getAppNme());		base.setInsuredCde(ins.getInsuredCde()); //被保人编码			base.setInsuredNme(ins.getInsuredNme());		base.setCreateAccount(getAccount());		base.setStatus("2");//2:客户信息审核中		base.setDeleteFlag("0");//0未删除	}	/**	 * 	* @param	* @Description:投保人被保人页面有名称相同的属性，此方法是给投保人相同的属性赋值 	* @author sunshuo	* @date 2016年10月21日 下午3:15:47 	* @return Object 返回类型 	* @throws	 */	public void  setCommonProperty( NvhlApplicantVO applicantVO,NvhlCommonVO common){		applicantVO.setClntMrk(common.getTClntMrk());//客户类型		applicantVO.setCertfCde(common.getTCertfCde());//证件号码		applicantVO.setCertfCls(common.getTCertfCls());//证件类型		applicantVO.setClntAddr(common.getTClntAddr());//住址		applicantVO.setZipCde(common.getTZipCde());//邮编		applicantVO.setEmail(common.getTEmail());//邮箱		applicantVO.setMobile(common.getTMobile());//联系方式		applicantVO.setCountry(common.getTCountry());//国家		applicantVO.setCusRiskLvl(common.getTCusRiskLvl());//客户风险等级		applicantVO.setCustRiskRank(common.getTCustRiskRank());//反洗钱客户风险等级		applicantVO.setCreateAccount(getAccount());	}	/**	 * 	* @param	* @Description:投保人被保人页面有名称相同的属性，此方法是 给被保人相同的属性赋值 	* @author sunshuo	* @date 2016年10月21日 下午3:15:47 	* @return void	* @throws	 */	public void  setCommonProperty(NvhlInsuredVO insuredVO,NvhlCommonVO common){		insuredVO.setClntMrk(common.getBClntMrk());//客户类型		insuredVO.setCcertfCde(common.getBCCertfCde());//证件号码		insuredVO.setCcertfCls(common.getBCCertfCls());//证件类型		insuredVO.setClntAddr(common.getBClntAddr());//住址		insuredVO.setZipCde(common.getBZipCde());//邮编		insuredVO.setCemail(common.getBCEmail());//邮箱		insuredVO.setMobile(common.getBMobile());//联系方式		insuredVO.setCountry(common.getBCountry());//国家		insuredVO.setCusRiskLvl(common.getBCusRiskLvl());//客户风险等级		insuredVO.setCustRiskRank(common.getBCustRiskRank());//反洗钱客户风险等级			insuredVO.setCreateAccount(getAccount());	}	/**	 * 	* @param	* @Description: 获取投保单号，投保人编号，被保人编号	* @author sunshuo	* @date 2016年10月21日 上午10:42:36 	* @return String    返回类型 	* @throws	 */	public String WebService1000(String url,Map packageListMap)throws Exception{		//最底层 packageList		Map<String,Object> outerMap = new LinkedHashMap<String,Object>();				Map <String,Object>dataTranAreaMap = new LinkedHashMap<String,Object>();						JSONArray packageListMapObject = JSONArray.fromObject(packageListMap);			    String tradtype = SystemManager.getInstance().getProperty("tradtype1000");	    String appnoflag = SystemManager.getInstance().getProperty("appnoflag");	    	    String cpasswd = SystemManager.getInstance().getProperty("cpasswd1000");	    String coperid = SystemManager.getInstance().getProperty("coperid1000");	    		dataTranAreaMap.put("tradType", tradtype);		dataTranAreaMap.put("packageList", packageListMapObject);		dataTranAreaMap.put("appNoFlag", appnoflag);//传3，是否返回投保单号标志			if(packageListMap.get("baseVO") == null){			throw new Exception();		}				telTradeRequestVO ttr = getDefaultTelTradeRequest(tradtype,dataTranAreaMap);					outerMap.put("telTradeRequestVO",ttr);		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd(cpasswd);		teloper.setAccequ("");		teloper.setCOperId(coperid);		teloper.setOperTm("");		teloper.setIp("");		teloper.setMacAddress("");		//telOperVO teloper = getDefaultTelOperVO(teloper);				outerMap.put("telOperVO", teloper);		JSONObject json = JSONObject.fromObject(outerMap);//		Object applicantJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("applicantVO").remove("list");//		Object baseJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("baseVO").remove("list");//		Object insuredJson = json.getJSONObject("telTradeRequestVO").getJSONObject("dataTranArea").getJSONArray("packageList").getJSONObject(0).getJSONObject("insuredVO").remove("list");				//调用webservice接口 		String result = webServiceUtil.getSupplyInfo(json.toString(),url,"clientCodeAndAppNo");				return result;	}	/**	 * 	* @param	* @Description: 获取支付申请号	* @author sunshuo	* @date 2016年10月21日 上午10:42:56 	* @return String    返回类型 	* @throws	 */	public String WebService1001(String url, Map dataTranArea){		//最底层 packageList		Map <String,Object>outerMap = new LinkedHashMap<String,Object>();			JSONArray baseMap = null;		telTradeRequestVO telTradeRequestVO =null;		//从配置文件里取常量		String tradtype = SystemManager.getInstance().getProperty("tradtype1001");		String cpasswd = SystemManager.getInstance().getProperty("cpasswd1000");		String coperid = SystemManager.getInstance().getProperty("coperid1000");		//---------------telTradeRequestVO--------------------		 telTradeRequestVO = getDefaultTelTradeRequest(tradtype,dataTranArea);		//---------------telTradeRequestVO *****--------------			//---------------outerMap--------------------		//telOperVO teloper=getDefaultTelOperVO("123456","123456","123456","123456","123456","123456","123456");		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd(cpasswd);		teloper.setAccequ("");		teloper.setCOperId(coperid);		teloper.setOperTm("");		teloper.setIp("");		teloper.setMacAddress("");				outerMap.put("telOperVO",teloper);				outerMap.put("telTradeRequestVO",telTradeRequestVO);			//---------------outerMap *****--------------						JSONObject json = JSONObject.fromObject(outerMap);		//调用webservice接口 		String result = webServiceUtil.getSupplyInfo(json.toString(), url,"getTotalParse");				return result;	}	/**	 * 	* @param	* @Description: 保单落地	* @author sunshuo	* @date 2016年10月21日 上午10:43:14 	* @return String    返回类型 	* @throws	 */		public String WebService1003(String url ,Map packageList){		//最底层 packageList 		Map<String,Object> outerMap = new LinkedHashMap<String,Object>();				telTradeRequestVO telTradeRequestVO = null;		Map<String,Object> dataTranArea = new LinkedHashMap<String,Object>();		//从配置文件里取常量		String tradtype = SystemManager.getInstance().getProperty("tradtype1003");		String cpasswd = SystemManager.getInstance().getProperty("cpasswd1003");		String coperid = SystemManager.getInstance().getProperty("coperid1003");				Object[]packageListArr = {packageList};			dataTranArea.put("nvhlPackageList", packageListArr);		dataTranArea.put("entryObjList", null);		dataTranArea.put("packageVO", null);		dataTranArea.put("tradType",tradtype);		//---------------dataTranArea *****--------------				  telTradeRequestVO = getDefaultTelTradeRequest(tradtype,dataTranArea);				//---------------telTradeRequestVO *****--------------			//---------------outerMap--------------------	    //telOperVO teloper=getDefaultTelOperVO("123456","123456","123456","123456","123456","123456","123456");		telOperVO teloper = new telOperVO();		teloper.setId("");		teloper.setCPassWd(cpasswd);		teloper.setAccequ("PC");		teloper.setCOperId(coperid);				teloper.setIp("");		teloper.setMacAddress("");		teloper.setOperTm(DateTimeUtil.getDateNowByExpression("yyyy-MM-dd HH:mm:ss"));				outerMap.put("telOperVO",teloper);				outerMap.put("telTradeRequestVO",telTradeRequestVO);		//outerMap.put("telTradeRtnVO",null);			//---------------outerMap *****--------------						JSONObject json = JSONObject.fromObject(outerMap);					//调用webservice接口 		String result = webServiceUtil.getSupplyInfo(json.toString(), url,"getTotalParse");			return result;	}		/**	 * 	* @param	* @Description: 险别信息列表赋值	* @author sunshuo	* @date 2016年11月28日 上午9:05:55 	* @return void    返回类型 	* @throws	 */	public NvhlCvrgVO setNvhlCvrgVO(SecureProductDetail detail,NvhlBaseVO base){		NvhlCvrgVO cvrgVO = new NvhlCvrgVO();		//从配置文件里取常量        String NDductAmt = SystemManager.getInstance().getProperty("NDductAmt");//免赔额（元）        String NDductRate = SystemManager.getInstance().getProperty("NDductRate");//免赔率（%）        String CDductDesc = SystemManager.getInstance().getProperty("CDductDesc");//免赔说明        cvrgVO.setNDductAmt(NDductAmt);        cvrgVO.setNDductRate(NDductRate);        cvrgVO.setCDductDesc(CDductDesc);		cvrgVO.setCvrgNo(detail.getCvrgNo());//险别代码		cvrgVO.setAmt(detail.getAmount().toString());//保额		cvrgVO.setRate(detail.getRate().toString());//费率				if(detail.getPremium() != null){			cvrgVO.setPrm(detail.getPremium().toString());//保费						}			cvrgVO.setCTgtNme(detail.getSubName());//标的名称		if(detail.getNIndemLmt() != null){			//double转int或者Integer						cvrgVO.setNIndemLmt(detail.getNIndemLmt());//累计赔偿限额						}		if("040001".equals(base.getCProdNo())){			cvrgVO.setNOnceIndemLmt("400000");			cvrgVO.setNOnceLamt("50000");			cvrgVO.setNPerAmt("40000");			cvrgVO.setNPerPrm("10000");		}		cvrgVO.setBgnTm(base.getTInsrncBgnTm());		cvrgVO.setEndTm(base.getTInsrncEndTm());				return cvrgVO;	}	/**	 * 	* @param	* @Description: 封装 teloper 实体	* @author sunshuo	* @date 2016年10月21日 下午3:53:38 	* @return telTradeRequestVO    返回类型 	* @throws	 */	public telOperVO getDefaultTelOperVO(String id,String cPassWd,String accequ,String cOperId,String operTm,String ip,String macAddress){		telOperVO teloper = new telOperVO();		teloper.setId(id);		teloper.setCPassWd(cPassWd);		teloper.setAccequ(accequ);		teloper.setCOperId(cOperId);		teloper.setOperTm(operTm);		teloper.setIp(ip);		teloper.setMacAddress(macAddress);		return teloper;	}	/**	 * 	* @param	* @Description: 封装 PageRecord 实体	* @author sunshuo	* @date 2016年10月21日 下午3:53:38 	* @return telTradeRequestVO    返回类型 	* @throws	 */	public PageRecord getDefaultPageRecord(){		PageRecord pr = new PageRecord();				return pr;	}	/**	 * 	* @param	* @Description: 封装 telTradeRequestVO 实体	* @author sunshuo	* @date 2016年10月21日 下午3:53:38 	* @return telTradeRequestVO    返回类型 	* @throws	 */	public telTradeRequestVO getDefaultTelTradeRequest(String tradeTye,Map dataTranArea){		telTradeRequestVO ttr = new telTradeRequestVO();		ttr.setDataTranArea(dataTranArea);		ttr.setTid(null);		UUIDGeneratorUtil uuidCreate=new UUIDGeneratorUtil();		ttr.setTransNo(uuidCreate.getUUID());		ttr.setTransTime(DateTimeUtil.getDateNowByExpression("hh:mm:ss"));		ttr.setTransDate(DateTimeUtil.getDateNowByExpression("yyyy-MM-dd"));		ttr.setTransType(tradeTye);//需与业务确认 		ttr.setSubtransNo("");		PageRecord pageRecord=new PageRecord();		ttr.setPageRecord(pageRecord);				return ttr;	}	@Override	public String toAdd(@ModelAttribute("e") SecureProduct e, ModelMap model) throws Exception {		String pid = RequestHolder.getRequest().getParameter("pid");			List<SecureProductDetail> secureProductDetailList = new ArrayList();				e.setSecureProductDetailList(secureProductDetailList);		return page_toAdd;	}		/**	 * 	* @param	* @Description: TODO(这里用一句话描述这个方法的作用) 	* @author sunshuo	* @date 2016年10月21日 上午10:44:56 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "toOrder")	public String toOrder(@ModelAttribute("e")SecureProduct e,ModelMap model) throws Exception {		String id = RequestHolder.getRequest().getParameter("id");		e = getService().selectById(id);		SecureProductDetail subProduct=new SecureProductDetail();		subProduct.setpId(id);		List<SecureProductDetail> secureProductDetail=getService().selectSecureProductDetail(subProduct);		if(e==null || StringUtils.isBlank(e.getId())){			throw new NullPointerException("根据产品ID查询不到指定的产品！");		}		e.setSecureProductDetailList(secureProductDetail);		model.addAttribute("e", e);		return page_toOrders;			}	//列表页面点击 编辑商品	@Override	public String toEdit(@ModelAttribute("e")SecureProduct e, ModelMap model) throws Exception {		return toEdit0(e, model);	}	/**	 * 添加或编辑商品后程序回转编辑	 * @return	 * @throws Exception	 */	@RequestMapping(value = "toEdit2")	public String toEdit2(SecureProduct e, ModelMap model) throws Exception {		return toEdit0(e, model);	}	/**	 * 添加或编辑商品后程序回转编辑	 * @return	 * @throws Exception	 */	@RequestMapping(value = "toEditProduct")	public String toEditProduct(SecureProduct e, ModelMap model) throws Exception {		return toEdit0(e, model);	}		/**	 * 根据商品ID，加载商品全部信息	 */	private String toEdit0(SecureProduct e, ModelMap model) throws Exception {        //RequestHolder.getRequest().setAttribute("catalogs", systemManager.getCatalogs());		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException("产品ID不能为空！");		}				e = getService().selectById(e.getId());		SecureProductDetail subProduct=new SecureProductDetail();		subProduct.setpId(e.getId());		List<SecureProductDetail> secureProductDetail=getService().selectSecureProductDetail(subProduct);		e.setSecureProductDetailList(secureProductDetail);//		if(e.getSecureProductDetailList()!=null && e.getSecureProductDetailList().size() > 0){			//			//如果有子产品，则添加3个到集合的最后，以方便添加数据//			for(int i=0;i<3;i++){//				e.getSecureProductDetailList().add(new SecureProductDetail());//			}			//		}		if(e==null || StringUtils.isBlank(e.getId())){			throw new NullPointerException("根据产品ID查询不到指定的产品！");		}		model.addAttribute("e", e);		return page_toEdit;	}	//分页查询商品	@Override	public String selectList(HttpServletRequest request,@ModelAttribute("e") SecureProduct e) throws Exception {		try {			if(StringUtils.isNotEmpty(LoginUserHolder.getUserRole().getRole_name())){				String role = LoginUserHolder.getUserRole().getRole_name();				if(!role.equals("超级管理员")){					User user = LoginUserHolder.getLoginUser();					e.setUid(user.getId());									}				super.selectList(request, e);			}																			} catch (Exception ex) {			ex.printStackTrace();			throw ex;		}				return page_toListAdmin;	}			/**	 *  添加产品	 */	@RequestMapping(value = "insertSecureProduct", method = RequestMethod.POST)	public String insertSecureProduct(HttpServletRequest request, SecureProduct e, ModelMap model, RedirectAttributes flushAttrs) throws Exception {		logger.error(">>>insert secureProduct...");				e.setStatus(1);		e.setDeleteFlag(0);		e.setCreateAccount(getAccount());		int pid=getService().insertSecureProduct(e);		insertSubProduct(e,pid);		e.setCreateAccount(getAccount());		model.addAttribute("e", e);		flushAttrs.addFlashAttribute("message", "新增成功！");		return "redirect:back";	}	/**	 *  添加子产品	 */	public void insertSubProduct(SecureProduct e,int pid) throws Exception {		List<SecureProductDetail> secureProductDetaillist=e.getSecureProductDetailList();		if(secureProductDetaillist!=null && secureProductDetaillist.size()>0){			for(int i=0;i<secureProductDetaillist.size();i++){				logger.error("=======保存子产品" + secureProductDetaillist.get(i));				SecureProductDetail subProduct = secureProductDetaillist.get(i);				if(subProduct.getSubName()!=null&&subProduct.getSubName().length() >0){					subProduct.setpId(String.valueOf(pid));					subProduct.setStatus(1);					subProduct.setDeleteFlag(0);					subProduct.setCreateAccount(getAccount());					int id=getService().insertSecureProductDetail(subProduct);				}							}		}else{			logger.error("=======保存失败");		}	}	/**	 * 更新产品	 */	public String updateSubProduct(HttpServletRequest request, SecureProductDetail e) throws Exception {		e.setUpdateAccount(getAccount());		getService().updateSecureProductDetail(e);		return null;	}		//获取后台管理人员的账号	private String getAccount(){		User user = LoginUserHolder.getLoginUser();		if(user==null){			throw new NullPointerException("登陆超时！");		}		return user.getId();	}		/**	 * 更新产品	 */	@Override	public String update(HttpServletRequest request, SecureProduct e, RedirectAttributes flushAttrs) throws Exception {		e.setUpdateAccount(getAccount());		//insertSubProduct(e,Integer.parseInt(e.getId()));		getService().update(e);		addMessage(flushAttrs, "修改成功！");		return "redirect:toEdit2?id="+ e.getId();	}		/**	 * 	* @param	* @Description: 公共的批量删除数据的方法，子类可以通过重写此方法实现个性化的需求 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws 	 */	@Override	        public String deletes(HttpServletRequest request, String[] ids, SecureProduct e, RedirectAttributes flushAttrs) throws Exception {	    			String deleteFlag = RequestHolder.getRequest().getParameter("deleteFlag");		User user = LoginUserHolder.getLoginUser();		//==0是只删除子产品		if(deleteFlag.equals("0")){				e.setUpdateAccount(user.getId());			getService().deleteSubProduct(ids, e);				addMessage(flushAttrs, "删除成功！");			return "redirect:toEdit2?id="+e.getId();		}else{			getService().deletes(ids,SecureProduct.Delete_flag_y,user.getId());			addMessage(flushAttrs, "删除成功！");	        return "redirect:selectList";		}			    }		/**	 * 	* @param	* @Description: 商品上架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateUpProduct", method = RequestMethod.POST)	public String updateUpProduct(@ModelAttribute("e")SecureProduct e) throws Exception{		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException();		}				User user = LoginUserHolder.getLoginUser();		secureProductService.updateProductStatus(new String[]{e.getId()},SecureProduct.Product_status_y,user.getUsername());//		getSession().setAttribute("insertOrUpdateMsg", "上架成功！");//		getResponse().sendRedirect(getEditUrl(e.getId()));		return "redirect:toEdit2?id="+e.getId();	}		/**	 * 	* @param	* @Description: 商品下架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateDownProduct", method = RequestMethod.POST)	public String updateDownProduct(@ModelAttribute("e")SecureProduct e) throws Exception{		if(StringUtils.isBlank(e.getId())){			throw new NullPointerException();		}		User user = LoginUserHolder.getLoginUser();		secureProductService.updateProductStatus(new String[]{e.getId()},SecureProduct.Product_status_n,user.getUsername());//		getSession().setAttribute("insertOrUpdateMsg", "下架成功！");//		getResponse().sendRedirect(getEditUrl(e.getId()));		return "redirect:toEdit2?id="+e.getId();	}		/**	 * 	* @param	* @Description: 商品上架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateUp", method = RequestMethod.POST)	public String updateUp(@ModelAttribute("e")SecureProduct e,String[] ids) throws Exception{				updateStatus(ids,SecureProduct.Product_status_y);		return "redirect:selectList";	}	/**	 * 	* @param	* @Description: 商品下架 	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	@RequestMapping(value = "updateDown", method = RequestMethod.POST)	public String updateDown(@ModelAttribute("e")SecureProduct e,String[] ids) throws Exception{		updateStatus(ids, SecureProduct.Product_status_n);		return selectList(RequestHolder.getRequest(), new SecureProduct());	}	/**	 * 	* @param	* @Description: 商品下架 /上架	* @author sunshuo	* @date 2016年10月21日 下午4:52:36 	* @return String    返回类型 	* @throws	 */	private void updateStatus(String[] ids, int status){		User user = LoginUserHolder.getLoginUser();		secureProductService.updateProductStatus(ids,status,user.getUsername());	}		/**	 * @description 用户编辑页面查询该用户已绑定的所有产品	 * @author lin	 * @return	 * @throws Exception	 */	@RequestMapping("userProductList")	public String userProductList(HttpServletRequest request, ModelMap model , @ModelAttribute("e") SecureProduct e) throws Exception {		// 用户编号		String uid = request.getParameter("uid");		// 用户名存入session 供显示用		if (request.getParameter("uname") != null) {			RequestHolder.getSession().setAttribute("userName", request.getParameter("uname"));			RequestHolder.getSession().setAttribute("uid", uid);		}				super.selectList(request, e);		return showBindProduct;	}	/**	 * 查询所有商品 标记已绑定的	 * 	 * @param request	 * @param ids	 *     已绑定的产品编号	 * @return	 * @throws Exception	 */	@RequestMapping("getAllProduct")	public String getAllProduct(HttpServletRequest request, @ModelAttribute("e") SecureProduct e)			throws Exception {		try {			HttpSession sess = RequestHolder.getSession();			String uid = e.getUid();			e.setUid("");			//e.setStatus(1); //查询所有已上架的产品			super.selectList(request, e);			e.setUid(uid);			userProduct u = new userProduct();			u.setUser_id(uid);			//查询该用户的所有产品信息			List<userProduct> idsList = getService().selectIDListFromUserProduct(u);			String ids = "";			if(idsList.size()>0){				 Iterator<userProduct> up = idsList.iterator(); 				 while(up.hasNext()){					 userProduct userproduct  = up.next();					 ids += "," + userproduct.getProduct_id();				 }				 ids = ids.substring(1,ids.length());			}			//所有产品id串返回前台供勾选			sess.setAttribute("repeatIds", ids);			return showAllProduct;		} catch (Exception ex) {			ex.printStackTrace();			throw ex;		}	}	/**	* @param postData 1005报文	* @Description: TODO(远程调用接口) 	* @author lyx	* @date 2016年10月21日 下午2:07:55 	* @return String    返回类型 	* @throws		public String getResonseInfo(String postData){		String responseMsg ="";//接受信息		HttpClient httpClient = new HttpClient();		httpClient.getParams().setContentCharset("utf-8");		String url = "http://localhost:8080/jshop"; //接口 url		PostMethod pm = new PostMethod(url);		pm.addParameter("responseXml", postData);		pm.getParams().setParameter(HttpMethodParams.HTTP_CONTENT_CHARSET,"utf-8");		try{			httpClient.executeMethod(pm);			responseMsg = pm.getResponseBodyAsString().trim();		}catch(Exception e){			e.printStackTrace();		}		return responseMsg;			} */		/**	 * @Description: TODO(给用户绑定商品) 	 * @author lyx	 * @date 2016年9月21日 下午4:10:01 	 * @return String 返回类型 	 */	@RequestMapping("bindUserProduct")	public String bindUserProduct(HttpServletRequest request, @ModelAttribute("e") SecureProduct e ) {		String userId = "";		String ids = request.getParameter("ids");		String uid ="";		userId = RequestHolder.getSession().getAttribute("uid").toString();//获取当前用户名		if(RequestHolder.getSession().getAttribute("userName") != null){			 uid = RequestHolder.getSession().getAttribute("uid").toString();		}		int secureProductIDS = secureProductService.bindUserProduct(ids,uid);		logger.info("共插入了" + (secureProductIDS + 1 ) + "条记录");					//查询该用户编号下的所有产品		try {			e.setUid(userId);			userProductList(request, null, e) ;		} catch (Exception e1) {			e1.printStackTrace();		}		return "redirect:userProductList?uid="+uid;	}		/**	 * 保单落地	 */	@RequestMapping(value="insurancePolicy")	public void insurancePolicy(HttpServletRequest request, HttpServletResponse response,ModelMap model,RedirectAttributes flushAttrs) throws Exception{		String payNo = "";String msg = "";//错误回显信息		NvhlApplicantVO applicantVO = new NvhlApplicantVO();				NvhlCommonVO common = null;		NvhlInsuredVO insuredVO = new NvhlInsuredVO();		NvhlBaseVO base	= new NvhlBaseVO();			SecureProduct secureProduct = new SecureProduct();		SecureProductDetail subProduct = new SecureProductDetail();		Keyvalue keyvalue = new Keyvalue();		String cappNo = request.getParameter("cappNo");//获取投保单号		//根据投保单号查寻数据库获取提交时收集的数据		NvhCollectCommonVO collectComm = CollectCommService.selectByCappNo("", cappNo);				if(StringUtils.isNotEmpty(RequestHolder.getRequest().getParameter("payNo"))){			payNo = RequestHolder.getRequest().getParameter("payNo");//支付申请号						//查询订单					base.setPayNo(payNo);			base = getNvhlBaseService().selectOne(base);							applicantVO.setAppCde(base.getAppCde());			applicantVO.setCreateAccount(base.getCreateAccount());			//查询投保人					applicantVO = getNvhlApplicantService().selectOne(applicantVO);					insuredVO.setInsuredCde(base.getInsuredCde());			insuredVO.setCreateAccount(base.getCreateAccount());			//查询被保人				insuredVO = getNvhlnsuredService().selectOne(insuredVO);				//查询保险产品				secureProduct.setCProdNo(base.getCProdNo());			secureProduct = getService().selectOne(secureProduct);			subProduct.setpId(secureProduct.getId());			List<SecureProductDetail> secureProductDetail = getService().selectSecureProductDetail(subProduct);			List nvhlCvrgVOList = new ArrayList();			for(int i = 0;i < secureProductDetail.size();i++){				nvhlCvrgVOList.add(setNvhlCvrgVO(secureProductDetail.get(i),base));			}	        String interfaceUrl = SystemManager.getInstance().getProperty("interfaceUrl"); //获取接口地址			Map packageListNos = setJson1003(base,applicantVO,insuredVO,common,nvhlCvrgVOList,keyvalue,collectComm);							String resultJson = WebService1003(interfaceUrl,packageListNos);			JSONObject telTradeRtnVO = JSONObject.fromObject(resultJson).getJSONObject("telTradeRtnVO");			if(resultJson == "" || (!resultJson.contains("telTradeRtnVO"))){				NvhlBaseVO failBase	= new NvhlBaseVO();				failBase.setPayNo(payNo);				failBase.setStatus("3");//保单落地失败				int paySucc = getNvhlBaseService().update(failBase);								flushAttrs.addFlashAttribute("message", "没有接收到出参报文，保单落地失败");			}						if(telTradeRtnVO.getJSONObject("resultVO").get("resultCode") != null){				//获取resultVO				JSONObject resultVO = JSONObject.fromObject(resultJson).getJSONObject("telTradeRtnVO").getJSONObject("resultVO");				String resultCode = resultVO.get("resultCode").toString();								if(!resultCode.equals("1")){//失败 != 1					NvhlBaseVO failBase	= new NvhlBaseVO();					failBase.setPayNo(payNo);					failBase.setStatus("3");//3支付成功但是保单落地失败					JSONObject packageVO = telTradeRtnVO.getJSONObject("dataTranArea").getJSONObject("packageVO");					JSONObject responseVo = packageVO.getJSONObject("responseVo");					msg = responseVo.get("errorMessage").toString();					int paySucc = getNvhlBaseService().update(failBase);									}else{//成功					NvhlBaseVO failBase	= new NvhlBaseVO();					failBase.setPayNo(payNo);					failBase.setStatus("4");					int paySucc = getNvhlBaseService().update(failBase);					msg = "保单落地成功请等待人工审核后刷新页面";				}						}else{				throw new NullPointerException("获取resultCode有误");			}						}		response.sendRedirect("/JDT/manage/NvhlBase/selectOrderInfo?id=" + base.getId()+"&msg=" + URLEncoder.encode(msg, "utf-8"));	}			 		/**	 * 	* @param	* @Description: 1：人工核保后调用该方法，根据返回信息更新订单表	* @author sunshuo	* @date 2017年1月16日 下午3:05:55 	* @return void    返回类型 	* @throws	 */	@RequestMapping(value = "getPolicyStatus",method = RequestMethod.POST)	public String getPolicyStatus(String policyStatusResult)throws Exception{		logger.info("------------------getPolicyStatus----------------------");		//验证入参非空		if(StringUtils.isEmpty(policyStatusResult) || (!policyStatusResult.contains("packageList"))){			logger.error("人工核保返回参数为空");					return "0";		}		NvhlBaseVO base	= new NvhlBaseVO();			JSONObject policyStatusJson = JSONObject.fromObject(policyStatusResult).getJSONArray("packageList").getJSONObject(0);		JSONObject telOperVO = JSONObject.fromObject(policyStatusResult).getJSONObject("telOperVO");		String coperId = telOperVO.getString("COperId");		String cpassWd = telOperVO.getString("CPassWd");		//验证用户名密码		if(!(coperId.equals("JDT") && cpassWd.equals("JDT"))){			logger.error("用户名或密码不对");			return "0";		}		String cappNo = policyStatusJson.getString("CAppNo");		String policyNo = policyStatusJson.getString("PolicyNo");		String edrAppNo = policyStatusJson.getString("EdrAppNo");		String cudrMrk = policyStatusJson.getString("CUdrMrk");		String policyIdef = policyStatusJson.getString("PolicyIdef");		String cresvTxt = policyStatusJson.getString("CResvTxt");		String undwrMsg = policyStatusJson.getString("undwrMsg");		String cudrCde = policyStatusJson.getString("CUdrCde");		String tudrTm = policyStatusJson.getString("TUdrTm");				base.setCAppNo(policyStatusJson.getString("CAppNo"));		base.setPolicyNo(policyStatusJson.getString("PolicyNo"));		base.setEdrAppNo(policyStatusJson.getString("EdrAppNo"));		base.setCudrMrk(policyStatusJson.getString("CUdrMrk"));		base.setPolicyIdef(policyStatusJson.getString("PolicyIdef"));		base.setCresvTxt(policyStatusJson.getString("CResvTxt"));		base.setUndwrMsg(policyStatusJson.getString("undwrMsg"));		base.setCudrCde(policyStatusJson.getString("CUdrCde"));		base.setTudrTm(policyStatusJson.getString("TUdrTm"));		//更新订单		int orderSucc = getNvhlBaseService().update(base);				//拼接返回字符串		String telBaseOutVOList = getReturnTelBaseOutVOList(cappNo,"1","成功");		return telBaseOutVOList;	}	/**	 * 人工核保调用接口后，需要返回结果信息	 * @return 结果信息字符串	 */	public String getReturnTelBaseOutVOList(String cappNo, String cEctRst, String cRstTxt){		JSONObject TelBaseOutVOList = new JSONObject();		telOperVO telOperVOObject = new telOperVO();		telOperVOObject.setId("");		telOperVOObject.setCPassWd("JDT");		telOperVOObject.setCOperId("JDT");		telOperVOObject.setAccequ("");						telOperVOObject.setIp("");		telOperVOObject.setMacAddress("");		telOperVOObject.setOperTm(DateTimeUtil.getDateNowByExpression("yyyy-MM-dd HH:mm:ss"));		JSONObject telTradeRtnVO = new JSONObject();				JSONObject dataTranArea = new JSONObject();				JSONArray returnList = new JSONArray();		JSONObject returnListJson = new JSONObject();		returnListJson.put("CAppNo", cappNo);		returnListJson.put("CEctRst", cEctRst);		returnListJson.put("CRstTxt", cRstTxt);		returnList.add(0, returnListJson);				dataTranArea.put("packageList",null);		dataTranArea.put("returnList",returnList);				telTradeRtnVO.put("dataTranArea", dataTranArea);		telTradeRtnVO.put("pageRecord", dataTranArea);		telTradeRtnVO.put("respNo", dataTranArea);		telTradeRtnVO.put("resultVO", dataTranArea);		telTradeRtnVO.put("subtransNo", dataTranArea);		telTradeRtnVO.put("telTradeRtnVO", dataTranArea);		telTradeRtnVO.put("transDate", dataTranArea);		telTradeRtnVO.put("transTime", dataTranArea);		telTradeRtnVO.put("transType", dataTranArea);				TelBaseOutVOList.put("telOperVO", telOperVOObject);		TelBaseOutVOList.put("telTradeRequestVO", null);		TelBaseOutVOList.put("telTradeRtnVO", telTradeRtnVO);		return TelBaseOutVOList.toString();	}	}