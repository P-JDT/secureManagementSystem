package net.jeeshop.web.action.front.product;import com.alibaba.fastjson.JSON;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.KeyValueHelper;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.oscache.FrontCache;import net.jeeshop.core.util.LRULinkedHashMap;import net.jeeshop.services.front.catalog.bean.Catalog;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.services.front.product.bean.ProductImageInfo;import net.jeeshop.services.manage.spec.SpecService;import net.jeeshop.services.manage.spec.bean.Spec;import net.jeeshop.services.manage.systemSetting.bean.SystemSetting;import net.jeeshop.web.action.front.FrontBaseController;import net.jeeshop.web.util.RequestHolder;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.*;import java.io.IOException;import java.util.*;/** * 商品信息管理 *  * @author jqsl2012@163.com * @author dylan *  */@Controller("frontProductAction")@RequestMapping("product")public class ProductAction extends FrontBaseController<Product> {	private static final long serialVersionUID = 1L;	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(ProductAction.class);	@Autowired	private ProductService productService;//商品服务	@Autowired	private SpecService specService;		@Override	public ProductService getService() {		return productService;	}	@ModelAttribute("catalogCode")	public String getCatalogCode(){		String catalogCode = RequestHolder.getRequest().getParameter("catalogCode");		if(StringUtils.isBlank(catalogCode)){			String attributeID = RequestHolder.getRequest().getParameter("attrID");		}		return StringUtils.trimToNull(catalogCode);	}	@ModelAttribute("catalog")	public Catalog getCatalog(){		Catalog catalog = null;		String catalogCode = getCatalogCode();		if(StringUtils.isNotBlank(catalogCode)){			return SystemManager.getInstance().getCatalogsCodeMap().get(catalogCode);		} else {			return catalog;		}	}	@ModelAttribute("catalogChildren")	public List<Catalog> getCatalogChildren(){		Catalog catalog = getCatalog();		if(catalog != null){			return catalog.getChildren();		}		return new ArrayList<Catalog>();	}	/**	 * 根据商品关键字搜索商品列表	 * @return	 * @throws Exception	 */	@RequestMapping(value = "search", method = RequestMethod.POST)	public String search(ModelMap model, @ModelAttribute("e")Product e) throws Exception{//		getSession().setAttribute("selectMenu", "");				String key = RequestHolder.getRequest().getParameter("key");//搜索关键字		if(StringUtils.isBlank(key)){			return "productList";		}		//		logger.error("search?key="+key);		model.addAttribute("key", key);		e.setName(key);		PagerModel pager = selectProductList0( e);		model.addAttribute("productList", pager.getList());		model.addAttribute("pager", pager);		e.clear();//		if(productList==null){//			logger.error("productList=0");//		}else{//			logger.error("productList="+productList.size());//		}		return "productList";	}		/**	 * 根据商品属性加载商品列表	 * @return	 * @throws Exception 	 */	@RequestMapping("productListByAttrID")	public String productListByAttrID(ModelMap model, @ModelAttribute("e")Product e) throws Exception{		try {//			logger.error("attributeID="+attributeID);//			getE().setAttrID(this.attributeID);//			Attribute attr = SystemManager.attrsMap.get(String.valueOf(this.attributeID));//			this.catalogID = attr.getCatalogID();//			logger.error("productListByAttrID  catalogID = "+catalogID);//			productList = selectProductList0();			productList(model, e);		} catch (Exception ex) {			logger.error("productListByAttrID()异常："+ex.getMessage());			ex.printStackTrace();			throw ex;		}		return "productList";	}		/**	 * 根据商品目录、子目录、属性、排序等规则分页加载商品列表信息。此方法为商品加载的通用方法。	 * @return	 * @throws Exception	 */	@RequestMapping("productList")	public String productList(ModelMap model, @ModelAttribute("e")Product e) throws Exception{		try {			String catalogCode = getCatalogCode();			logger.error("special="+e.getSpecial() + ",orderBy="+e.getOrderBy() + ",catalogCode="+catalogCode);						Catalog item = systemManager.getCatalogsCodeMap().get(catalogCode);			if(item==null){				throw new NullPointerException("目录为空！");			}			logger.error("item.getId()="+item.getId());			//			getSession().setAttribute("selectMenu", item.getId());//设置选择的商品目录						logger.error("item.getId()="+item.getId());			//添加可能是父类的类别ID到查询类别集合			e.getQueryCatalogIDs().add(Integer.valueOf(item.getId()));			logger.error("getE().getQueryCatalogIDs()="+e.getQueryCatalogIDs());						if(item.getPid().equals("0")){//主类别				e.setMainCatalogName(item.getName());				//大类ID				e.setQueryCatalogIDs(new LinkedList<Integer>());				if(item.getChildren() != null) {					for(int j=0;j<item.getChildren().size();j++){						//如果存在多级目录的话，则此处可以把所有的目录ID全部循环出来，反正SQL语句使用in查询就可以了						e.getQueryCatalogIDs().add(Integer.valueOf(item.getChildren().get(j).getId()));					}				}else {					e.getQueryCatalogIDs().add(Integer.valueOf(item.getId()));				}			}else{//子类别				e.setChildrenCatalogName(item.getName());				item = systemManager.getCatalogsMap().get(item.getPid());//				getSession().setAttribute("selectMenu", item.getId());				e.setMainCatalogName(item.getName());			}			//加载商品			PagerModel pager = selectProductList0( e);			Map<String, String> orderMap = KeyValueHelper.getMap("product_orderBy_");			model.addAttribute("mainCatalogCode", item.getCode());			model.addAttribute("productList", pager.getList());			model.addAttribute("pager", pager);			model.addAttribute("orderMap", orderMap);		} catch (Exception ex) {			logger.error("productList()异常："+ex.getMessage());			ex.printStackTrace();			throw ex;		}				return "productList";	}		/**	 * 加载热门、特价、最新的商品列表信息	 * @return	 * @throws Exception	 */	@RequestMapping("special/{code}")	public String specialProductList(ModelMap model,@ModelAttribute("code")@PathVariable("code") String code) throws Exception{		logger.error("special="+code);//		getSession().setAttribute("selectMenu", -1);//不选择任何的主菜单//		e.setSpecial(special);		//加载商品		Product e = new Product();		e.setSpecial(code);		PagerModel pager = selectProductList0( e);		pager.setPagerUrl(code+".html");		Map<String, String> orderMap = KeyValueHelper.getMap("product_orderBy_");		model.addAttribute("productList", pager.getList());		model.addAttribute("pager", pager);		model.addAttribute("orderMap", orderMap);		//指定分页请求的地址//		pager.setPagerUrl(special+".html");		return "specialProductList";	}		/**	 * 处理图片，后台上传的图片地址是这样的/myshop/attached/image/20130928/20130928233856_374.jpg	 * 系统设置的图片服务器的地址是http://127.0.0.1:8082/myshop ，需要合并成正确的可以显示图片的地址	 */	@Deprecated	private void doImage(List<Product> productList){		SystemSetting ssInfo = systemManager.getSystemSetting();//(SystemSetting) CacheSingle.getInstance().get(FrontContainer.SystemSetting);		if(productList==null || productList.size()==0){			return ;		}				for(int i=0;i<productList.size();i++){			Product p = productList.get(i);			if(StringUtils.isNotEmpty(p.getPicture())){				String picture = p.getPicture();				picture = picture.substring(1);				int firstChar = picture.indexOf("/");				picture = picture.substring(firstChar);				p.setPicture(ssInfo.getImageRootPath() + picture);			}		}	}			/**	 * 用户浏览的商品信息存储在session中	 * 由于存储的数量有限，每一个sessin中只存储最近的10个商品，并且只存储一些基本的信息,如：商品ID、商品名称、现价、原价。	 * 这里需要用到数量固定的缓存策略，最后浏览的商品在第一个位置	 */	private void saveHistoryProductToSession(Product e) {//		List<Product> history_product_list = (List<Product>) getSession().getAttribute(FrontContainer.history_product_list);		LinkedHashMap<String, Product> history_product_map = (LinkedHashMap<String, Product>) RequestHolder.getSession().getAttribute(FrontContainer.history_product_map);//		LinkedHashMap<String, String> map = new LRULinkedHashMap<String, String>(16, 0.75f, true);		if(history_product_map==null){			history_product_map = new LRULinkedHashMap<String, Product>(16, 0.75f, true);			RequestHolder.getSession().setAttribute(FrontContainer.history_product_map,history_product_map);		}				//添加浏览过的商品信息到集合		Product pro = new Product();		pro.setId(e.getId());		pro.setName(e.getName());		pro.setPrice(e.getPrice());		pro.setNowPrice(e.getNowPrice());		pro.setPicture(e.getPicture());		history_product_map.put(e.getId(),pro);				//分离数据，方便页面显示//		Collection<Product> historyList = history_product_map.values();//		for(int i=historyList.size()-1;i>=0;i--){//			historyList.//		}	}	/**	 * 根据商品ID检查商品信息	 * @return	 */	private Catalog checkProduct(Product e) {		if(e==null){			throw new NullPointerException("根据商品ID查询不到指定的商品信息！");		}		if(StringUtils.isBlank(e.getCatalogID())){			throw new NullPointerException("商品无类别！");		}				/**		 * 根据商品信息去查询它的分类		 */		Catalog item = systemManager.getCatalogsMap().get(e.getCatalogID());		if(item==null){			throw new NullPointerException("商品数据异常！");		}		return item;	}	/**	 * 商品详情页面，图片列表的处理	 */	private void productImagesBiz(String imagesStr, Product e) {		if(StringUtils.isBlank(imagesStr)){			return;		}				String[] images = imagesStr.split(FrontContainer.product_images_spider);		logger.error("e.getImages()="+e.getImages());		if(e.getProductImageList()==null){			e.setProductImageList(new LinkedList<ProductImageInfo>());		}else{			e.getProductImageList().clear();		}		for(int i=0;i<images.length;i++){			String img = images[i].trim();			int lastIndex = img.lastIndexOf("_");			String left = img.substring(0, lastIndex+1);			String right = img.substring(lastIndex+2);			logger.error("left = "+left+",right="+right);						e.getProductImageList().add(new ProductImageInfo(left+"1"+right,left+"2"+right,left+"3"+right));		}	}				/**	 * 分页加载产品列表，每4个一行的显示	 * @param e	 * @return	 * @throws Exception	 */	private PagerModel selectProductList0(Product e) throws Exception {//		getE().setStatus(2);//加载已经上架的商品//		getE().setOrderBy(orderBy);//设置排序规则		PagerModel pager = super.selectPageList(getService(), e);//分页搜索数据库中的商品//		doImage(result);		return pager;//		return convert4(result);	}			public boolean isEmpty(String value){		if(value==null || value.trim().length()==0){			return true;		}		return false;	}					}