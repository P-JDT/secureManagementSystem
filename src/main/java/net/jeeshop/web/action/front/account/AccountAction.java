package net.jeeshop.web.action.front.account;import java.io.IOException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Iterator;import java.util.LinkedHashMap;import java.util.LinkedList;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import org.apache.commons.lang.StringUtils;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Controller;import org.springframework.ui.ModelMap;import org.springframework.web.bind.annotation.ModelAttribute;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestMethod;import org.springframework.web.bind.annotation.ResponseBody;import org.springframework.web.servlet.mvc.support.RedirectAttributes;import com.alibaba.fastjson.JSON;import com.squareup.okhttp.Address;import net.jeeshop.core.FrontContainer;import net.jeeshop.core.dao.page.PagerModel;import net.jeeshop.core.front.SystemManager;import net.jeeshop.core.util.AddressUtils;import net.jeeshop.core.util.DateTimeUtil;import net.jeeshop.core.util.MD5;import net.jeeshop.services.common.NotifyTemplate;import net.jeeshop.services.front.account.AccountService;import net.jeeshop.services.front.account.bean.Account;import net.jeeshop.services.front.account.bean.LoginTypeEnum;import net.jeeshop.services.front.order.OrderService;import net.jeeshop.services.front.order.bean.Order;import net.jeeshop.services.front.order.bean.OrderSimpleReport;import net.jeeshop.services.front.product.ProductService;import net.jeeshop.services.front.product.bean.Product;import net.jeeshop.web.action.BaseController;import net.jeeshop.web.action.front.orders.CartInfo;import net.jeeshop.web.util.LoginUserHolder;import net.jeeshop.web.util.RequestHolder;/** * 门户会员服务类 *  * @author huangf *  */@Controller("frontAccountController")@RequestMapping("account")public class AccountAction extends BaseController<Account> {	private static final org.slf4j.Logger logger = LoggerFactory.getLogger(AccountAction.class);	private static final long serialVersionUID = 1L;	@Autowired	private AccountService accountService;	@Autowired	private OrderService orderService;//	private List<Address> addressList;//配送地址列表	@Autowired	private ProductService productService;		private static final Object qq_login_lock = new Object();//qq登陆，本地锁	private static final Object sinawb_login_lock = new Object();//新浪微博登陆，本地锁		// 登陆错误信息	private static final String toLogin = "/account/login";//转到登陆界面,forword方式 地址不变	private static final String toLoginRedirect = "redirect:/account/login";//转到登陆界面,getResponse().sendRedirect(arg0)方式 地址变化	private static final String toIndex = "redirect:/";//转到门户首页	@Override	public AccountService getService() {		return accountService;	}	public void setAccountService(AccountService accountService) {		this.accountService = accountService;	}	public void prepare(Account e) throws Exception {		logger.error("AccountAction.prepare...");	}	/**	 * 用户注册	 * 	 * @return	 * @throws IOException 	 */	@RequestMapping(value = "doRegister", method = RequestMethod.POST)	public String doRegister(Account e, ModelMap model) throws IOException {		if(StringUtils.isBlank(e.getEmail())){			throw new NullPointerException("邮箱不能为空！");		}				e.setPassword(MD5.md5(e.getPassword()));		if (StringUtils.isBlank(e.getId())) {			// 用户注册			getService().insert(e);		} else {			// 修改密码			throw new NullPointerException("不支持！");		}				model.addAttribute("uid", e.getId());		return "redirect:/account/checkEmail.html";	}		/**	 * 用户注册--》再次发送邮件	 * @return	 * @throws IOException 	 */	@RequestMapping(value = "sendEmailAgain", method = RequestMethod.POST)	public String sendEmailAgain(String uid, ModelMap model) throws IOException{		if(StringUtils.isBlank(uid)){			throw new NullPointerException("参数不正确！");		}				Account acc = accountService.selectById(uid);		if(acc==null){			throw new NullPointerException("根据用户ID查询不到用户信息！");		}				model.addAttribute("uid", acc.getId());		return "redirect:/account/checkEmail.html";	}	/**	 * 转到邮箱验证提示页面	 * @return	 */	@RequestMapping("checkEmail")	public String checkEmail(){		logger.info("checkEmail");		return "/account/regsuccess";	}		/**	 * 转到忘记密码页面	 * @return	 */	@RequestMapping("forget")	public String forget(){		return "/account/forget";	}		@RequestMapping("waitUserCheck")	public String waitUserCheck(){		return "/account/waitUserCheck";	}		/**	 * ajax检查用户名称是否存在	 * @return	 * @throws IOException 	 */	@RequestMapping("checkAccountExist")	@ResponseBody	public String checkAccountExist(Account e) throws IOException{		if(StringUtils.isBlank(e.getAccount())){			return ("{\"error\":\"用户名不能为空!\"}");		}else{			Account acc = new Account();			acc.setAccount(e.getAccount());			if(accountService.selectCount(acc)==0){				return ("{\"error\":\"用户名不存在!\"}");			}else{				return ("{\"ok\":\"用户名输入正确!\"}");			}		}	}	/**	 * ajax检查密码是否正确	 * @return	 * @throws IOException 	 */	@RequestMapping("checkPassword")	@ResponseBody	public String checkPassword(Account e) throws IOException{		if(StringUtils.isBlank(e.getPassword())){			return ("{\"error\":\"密码不能为空!\"}");		}else{			Account acc = new Account();			acc.setPassword(MD5.md5(e.getPassword()));			if(accountService.selectCount(acc)==0){				return ("{\"error\":\"输入的密码不正确!\"}");			}else{				return ("{\"ok\":\"密码正确!\"}");			}		}	}		/**	 * ajax检查新邮箱不能和原邮箱一致	 * @return	 * @throws IOException 	 */	@RequestMapping("changeEmailCheck")	@ResponseBody	public String changeEmailCheck(Account e) throws IOException{		if(StringUtils.isBlank(e.getNewEmail())){			return ("{\"error\":\"新邮箱不能为空!\"}");		}else{			Account acc = (Account) RequestHolder.getSession().getAttribute(FrontContainer.USER_INFO);			if (acc == null || StringUtils.isBlank(acc.getAccount())) {				return toLogin;			}						if(acc.getEmail().equals(e.getNewEmail())){				return ("{\"error\":\"新邮箱不能和原邮箱一致!\"}");			}else{				return ("{\"ok\":\"系统认为此邮箱可用!\"}");			}		}	}		/**	 * 转到登陆页面	 * @return	 */	@RequestMapping("login")	public String login() {		logger.error("toLogin...");		if (LoginUserHolder.getLoginAccount() != null) {			return toIndex;		}		return toLogin;	}		/**	 * 转到注册页面	 * @return	 */	@RequestMapping("register")	public String register() {		logger.error("register...");		if (LoginUserHolder.getLoginAccount() != null) {			return toIndex;		}		return "/account/register";	}		/**	 * 用户登陆	 * 	 * @return	 */	@RequestMapping("doLogin")	public String doLogin(Account e, ModelMap model, RedirectAttributes flushAttrs) {		logger.error("doLogin()...");		if (LoginUserHolder.getLoginAccount() != null) {			return toIndex;		}		String errorMsg = "<font color='red'>帐号或密码错误!</font>";		if (e.getAccount() == null || e.getAccount().trim().equals("")				|| e.getPassword() == null || e.getPassword().trim().equals("")){			model.addAttribute("errorMsg", errorMsg);			logger.error("doLogin.errorMsg="+errorMsg);			return toLogin;		}		//用户验证		e.setPassword(MD5.md5(e.getPassword()));		String account = e.getAccount();		String password = e.getPassword();		e.clear();		e.setAccount(account);		e.setPassword(password);		Account acc = accountService.selectOne(e);		if (acc == null) {			model.addAttribute("errorMsg", errorMsg);			return toLogin;		}else if(acc.getFreeze().equals(Account.account_freeze_y)){			if(StringUtils.isBlank(acc.getFreezeStartdate()) && StringUtils.isBlank(acc.getFreezeEnddate())){				model.addAttribute("errorMsg", "<font color='red'>此账号已永久冻结!有疑问请联系站点管理员!</font>");			}else{				model.addAttribute("errorMsg", "<font color='red'>此账号已暂时冻结!有疑问请联系站点管理员!</font>");			}			return toLogin;		}else if(acc.getEmailIsActive().equals(Account.account_emailIsActive_n)){			//邮箱未激活			errorMsg = "<font color='red'>此账号的邮箱尚未激活，请立即去激活邮箱！</font>";			model.addAttribute("errorMsg", errorMsg);			return toLogin;		}		errorMsg = null;		acc.setLoginType(LoginTypeEnum.system);//登陆方式		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, acc);				//更新用户最后登录时间		e.clear();		e.setId(acc.getId());		e.setLastLoginTime("yes");		e.setLastLoginIp(AddressUtils.getIp(RequestHolder.getRequest()));		String address = null;		try {			address = AddressUtils.getAddresses("ip=" + e.getLastLoginIp(), "utf-8");		} catch (Exception ex) {			ex.printStackTrace();		}				e.setLastLoginArea(address);		accountService.update(e);		return toIndex;	}	/**	 *	 * @return	 */	@RequestMapping("exit")	public String exit() {		logout();		return "redirect:/account/login";	}	/**	 * 用户注销	 * 	 * @return	 */	@RequestMapping("logout")	public String logout() {		//清除用户session		RequestHolder.getSession().setAttribute(FrontContainer.USER_INFO, null);				//清除用户购物车缓存		CartInfo cartInfo = (CartInfo) RequestHolder.getSession().getAttribute(FrontContainer.myCart);		if(cartInfo!=null){			cartInfo.clear();		}		RequestHolder.getSession().setAttribute(FrontContainer.myCart, null);		//清除历史浏览记录		LinkedHashMap<String, Product> history_product_map = (LinkedHashMap<String, Product>) RequestHolder.getSession().getAttribute(FrontContainer.history_product_map);//		List<String> history_product_map = (List<String>) getSession().getAttribute(FrontContainer.history_product_map);		if(history_product_map!=null){			history_product_map.clear();		}		RequestHolder.getSession().setAttribute(FrontContainer.history_product_map, null);		return toLogin;	}			/**	 * ajax验证输入的字符的唯一性	 * @return	 * @throws IOException	 */	@RequestMapping("unique")	@ResponseBody	public String unique(Account e) throws IOException{		logger.error("验证输入的字符的唯一性"+e);		logger.error(e.getNickname());		if(StringUtils.isNotBlank(e.getNickname())){//验证昵称是否被占用			logger.error("验证昵称是否被占用");			String nickname = e.getNickname();			e.clear();			e.setNickname(nickname);			if (accountService.selectCount(e)>0){				return ("{\"error\":\"昵称已经被占用!\"}");			}else{				return ("{\"ok\":\"昵称可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getAccount())){//验证用户名是否被占用			logger.error("验证用户名是否被占用");			String account = e.getAccount();			e.clear();			e.setAccount(account);			if (accountService.selectCount(e)>0){				return ("{\"error\":\"用户名已经被占用!\"}");			}else{				return ("{\"ok\":\"用户名可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getEmail())){//验证邮箱是否被占用			logger.error("验证邮箱是否被占用="+e.getEmail());			String email = e.getEmail();			e.clear();			e.setEmail(email);			if (accountService.selectCount(e) > 0){				return ("{\"error\":\"邮箱已经被占用!\"}");			}else{				return ("{\"ok\":\"邮箱可以使用!\"}");			}		}else if(StringUtils.isNotBlank(e.getVcode())){//验证验证码输入的是否正确			logger.error("检查验证码输入的是否正确"+e.getVcode());			String validateCode = RequestHolder.getSession().getAttribute(FrontContainer.validateCode).toString();			logger.error("validateCode=" + validateCode);			if(validateCode.equalsIgnoreCase(e.getVcode())){				return ("{\"ok\":\"验证码输入正确!\"}");			}else{				return ("{\"error\":\"验证码输入有误!\"}");			}//			vcode = null;		}else if(StringUtils.isNotBlank(e.getPassword())){//验证原始密码输入是否正确			logger.error("验证原始密码输入是否正确"+e.getPassword());			Account acc = LoginUserHolder.getLoginAccount();			if(StringUtils.isNotBlank(e.getPassword()) && MD5.md5(e.getPassword()).equals(acc.getPassword())){				return ("{\"ok\":\"原密码输入正确!\"}");			}else{				return ("{\"error\":\"原密码输入有误!\"}");			}		}				if(e!=null){			e.clear();		}		return null;	}			private boolean requireLogin() throws NullPointerException{		Account account = LoginUserHolder.getLoginAccount();		if (account == null || StringUtils.isBlank(account.getAccount())) {			return true;		}		return false;	}		/**	 * 我的订单列表	 * @return	 * @throws Exception 	 */	@RequestMapping("orders")	public String orders(ModelMap model) throws Exception{		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}//		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);//		selectLeftMenu = "orders";		PagerModel pager = getMyOrders(acc.getAccount());		model.addAttribute("pager", pager);				//查询汇总		OrderSimpleReport orderSimpleReport = orderService.selectOrdersSimpleReport(acc.getAccount());		model.addAttribute("orderSimpleReport", orderSimpleReport);		logger.error("orderSimpleReport="+orderSimpleReport);		return "/account/orders";	}		/**	 * 分页查询订单集合	 * @return	 * @throws Exception	 */	private PagerModel selectMyOrders(String account) throws Exception {		int offset = 0;		if (RequestHolder.getRequest().getParameter("pager.offset") != null) {			offset = Integer					.parseInt(RequestHolder.getRequest().getParameter("pager.offset"));		}		if (offset < 0)			offset = 0;				PagerModel pager = new PagerModel();		Order order = new Order();		order.setAccount(account);		(order).setOffset(offset);		pager = orderService.selectPageList(order);		if(pager==null)pager = new PagerModel();		// 计算总页数		pager.setPagerSize((pager.getTotal() + pager.getPageSize() - 1)				/ pager.getPageSize());		//		selectListAfter();		pager.setPagerUrl("orders");		return pager;	}	/**	 * 分页获取我的订单列表，首页分页查询订单集合，然后把查询到的ID集合仍到一个多表联合的查询里面，查询出更多的信息。分页显示用户的订单只用一个SQL貌似不好搞的。想到好办法再去优化。	 * @throws Exception	 */	private PagerModel getMyOrders(String account) throws Exception {		//分页查询订单ID集合//		super.selectList();		//1、分页查询订单集合		PagerModel pager = selectMyOrders(account);		//根据上面查询出来的ID集合，多表联合查询出订单和订单明细数据		List<Order> ordersTemp = pager.getList();		List<String> ids = new LinkedList<String>();		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");		for(int i=0;i<ordersTemp.size();i++){			Order orderItem = ordersTemp.get(i);			//时间转换成可以阅读的格式			orderItem.setCreatedate(DateTimeUtil.getDateTimeString(sdf.parse(orderItem.getCreatedate())));			ids.add(orderItem.getId());		}				Order order = new Order();		order.clear();		order.setAccount(account);		order.setQueryOrderIDs(ids);		//2、查询指定订单集合的所有订单项集合，然后内存中对订单项进行分组		List<Order> myOrders = orderService.selectList(order);		if(myOrders!=null && myOrders.size()>0){			for(int i=0;i<ordersTemp.size();i++){				Order orderItem = ordersTemp.get(i);				for(Iterator<Order> it = myOrders.iterator();it.hasNext();){					Order orderdetail = it.next();//					logger.error("orderdetail.getId()="+orderdetail.getId());//					logger.error("orderItem.getId()="+orderItem.getId());					if(orderdetail.getId().equals(orderItem.getId())){						orderItem.getOrders().add(orderdetail);						it.remove();					}				}			}		}		//		Map<String, Order> orderMap = new HashMap<String, Order>();		//处理成页面显示的数据格式//		if(myOrders!=null && myOrders.size()>0){//			orderMap.clear();//			for(int i=0;i<myOrders.size();i++){//				order = myOrders.get(i);//				Order entry = orderMap.get(order.getId());//				if(entry==null){//					//添加订单//					orderMap.put(order.getId(), order);//					//添加订单项//					order.getOrders().add(order);//					continue;//				}//				//				//否则添加订单到此MAP订单的orders集合中，此集合存储的是订单明细信息//				entry.getOrders().add(order);//			}//			myOrders.clear();//			myOrders.addAll(orderMap.values());//			orderMap.clear();////			//根据订单ID排序//			Collections.sort(myOrders, new Comparator<Order>() {//				@Override//				public int compare(Order o1, Order o2) {//					int id1 = Integer.valueOf(o1.getId());//					int id2 = Integer.valueOf(o2.getId());//					if (id1 > id2) {//						return 1;//					} else if (id1 < id2) {//						return 2;//					}//					return 0;//				}//			});//			getPager().setList(myOrders);//		}//		getSession().setAttribute(FrontContainer.selectMenu, "user_centers");		return pager;	}		/**	 * 转到修改密码	 * @return	 */	@RequestMapping("topwd")	public String topwd(ModelMap model, @ModelAttribute("e") Account e){		if (LoginUserHolder.getLoginAccount() == null) {			return toLoginRedirect;		}//		selectLeftMenu = "topwd";		return "/account/topwd";	}		/**	 * 修改密码	 * @return	 */	@RequestMapping("changePwd")	public String changePwd(ModelMap model, @ModelAttribute("e")Account e, RedirectAttributes flushAttrs){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}		if (StringUtils.isBlank(e.getNewPassword())				|| StringUtils.isBlank(e.getNewPassword2())				|| StringUtils.isBlank(e.getPassword()) 				|| !e.getNewPassword2().equals(e.getNewPassword())) {			throw new NullPointerException();		}//		getSession().setAttribute(FrontContainer.selectMenu,FrontContainer.not_select_menu);//		selectLeftMenu = "changePwd";//		selectLeftMenu = "topwd";//		logger.error(">>e.getNewPassword() = "+e.getNewPassword());		e.setPassword(MD5.md5(e.getNewPassword()));		e.setId(acc.getId());//		logger.error(">>e.getPassword() = "+e.getPassword());		accountService.update(e);		flushAttrs.addFlashAttribute("errorMsg", "修改密码成功！");		//重新缓存密码数据		acc.setPassword(e.getPassword());				e.clear();		return "redirect:/account/changePwdSuccess";	}	@RequestMapping("changePwdSuccess")	public String changePwdSuccess(){		return "/account/changePwdSuccess";	}		/**	 * 转到我的积分	 * @param model	 * @param e	 * @return	 */	@RequestMapping("score")	public String score(ModelMap model, @ModelAttribute("e") Account e){		Account acc = LoginUserHolder.getLoginAccount();		if (LoginUserHolder.getLoginAccount() == null) {			return toLoginRedirect;		}		e = accountService.selectById(acc.getId());		model.addAttribute("e", e);		return "/account/score";	}	/**	 * 通过邮件重置密码	 * @return	 * @throws IOException 	 */	@RequestMapping("doReset")	public String doReset(ModelMap model, Account e) throws IOException{		logger.error("doReset...");		if(StringUtils.isBlank(e.getAccount()) || StringUtils.isBlank(e.getPassword()) || StringUtils.isBlank(e.getPassword2())){			throw new NullPointerException("请求非法！");		}				if(!e.getPassword().equals(e.getPassword2())){//			getRequest().setAttribute(FrontContainer.show_user_option_error, "两次输入的密码不一致！");			throw new RuntimeException("两次输入的密码不一致！");		}		logger.error("doReset...e.getPassword() = "+e.getPassword());		Account acc = new Account();		acc.setAccount(e.getAccount());		acc.setPassword(MD5.md5(e.getPassword()));		accountService.updatePasswordByAccount(acc);		return "redirect:/account/resetSuccess";//		return "resetSuccess";	}	@RequestMapping("resetSuccess")	public String resetSuccess(){		return "/account/resetSuccess";	}		/**	 * 转到修改邮箱页面	 * @return	 */	@RequestMapping("changeEmail")	public String changeEmail(){		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLoginRedirect;		}		return "/account/changeEmail";	}		/**	 * 修改邮箱	 * @return	 * @throws Exception 	 */	@RequestMapping("doChangeEmail")	public String doChangeEmail(Account e) throws Exception{		logger.error("e.getNewEmail() = "+e.getNewEmail());		Account acc = LoginUserHolder.getLoginAccount();		if (acc == null || StringUtils.isBlank(acc.getAccount())) {			return toLogin;		}				logger.error("doChangeEmail..");//		if(!TokenUtil.getInstance().isTokenValid(getRequest())){//			throw new Exception("表单重复提交了！");//		}		e.setId(acc.getId());		if(StringUtils.isBlank(e.getPassword()) || StringUtils.isBlank(e.getNewEmail())){			throw new NullPointerException("非法请求！");		}		//		Account acc = (Account)getSession().getAttribute(FrontContainer.USER_INFO);		if(!MD5.md5(e.getPassword()).equals(acc.getPassword())){			//前台AJAX检查密码出问题了，后台来处理前端的不足			throw new RuntimeException("出现错误，请联系系统管理员！");		}				//发送邮件到指定邮箱。		acc.setNewEmail(e.getNewEmail());		acc.setNewEmail(null);		return "redirect:/account/changeEmailWait.html";	}	@RequestMapping("changeEmailWait")	public String changeEmailWait(){		logger.error("changeEamilWait..");		return "account/changeEmailWait";	}	}